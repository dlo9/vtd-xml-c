/* The following code was generated by CSFlex 1.4 on 4/18/2006 */

#line 1 "scanner_cs.flex"
/* 
 * Copyright (C) 2002-2006 XimpleWare, info@ximpleware.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

namespace com.ximpleware.xpath {


using System;
using System.Collections;
using System.IO;
using System.Text;
using TUVienna.CS_CUP.Runtime;
using com.ximpleware.parser;


#line default
/**
 * This class is a scanner generated by <a href="http://www.sourceforge.net/projects/csflex/">C# Flex</a>, based on
 * <a href="http://www.jflex.de/">JFlex</a>, version 1.4
 * on 4/18/2006 from the specification file
 * <tt>scanner_cs.flex</tt>
 */
class Yylex: sym, TUVienna.CS_CUP.Runtime.Scanner {
  /** This character denotes the end of file */
  public const int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private const int ZZ_BUFFERSIZE = 16384;
  /**
   * This is used in 'if' statements to eliminate dead code
   * warnings for 'break;' after the end of a user action
   * block of code. The Java version does this by emitting
   * a second 'case' which is impossible to reach. Since this
   * is impossible for the compiler to deduce during semantic
   * analysis, the warning is stifled. However, C# does not
   * permit 'case' blocks to flow into each other, so the C#
   * output mode needs a different approach. In this case,
   * the entire user code is wrapped up in an 'if' statement
   * whose condition is always true. No warning is emitted
   * because the compiler doesn't strictly propagate the value
   * of 'static readonly' fields, and thus does not semantically
   * detect the fact that the 'if' will always be true.
   */
   public static readonly bool ZZ_SPURIOUS_WARNINGS_SUCK = true;

  /** lexical states */
  public const int YYINITIAL = 0;
  static Yylex()
  {
    ZZ_ACTION = zzUnpackAction();
    ZZ_ROWMAP = zzUnpackRowMap();
    ZZ_TRANS = zzUnpackTrans();
    ZZ_ATTRIBUTE = zzUnpackAttribute();
  }


  /** 
   * Translates characters to character classes
   */
  private static readonly char[] ZZ_CMAP = new char[] {
    (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 1, (char) 1, (char) 0, (char) 0, (char) 1, (char) 0, (char) 0, 
    (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, 
    (char) 1, (char)16, (char)41, (char) 0, (char) 3, (char) 0, (char) 0, (char)42, (char) 9, (char)10, (char)17, (char) 5, (char) 8, (char) 4, (char) 6, (char)18, 
    (char) 2, (char) 2, (char) 2, (char) 2, (char) 2, (char) 2, (char) 2, (char) 2, (char) 2, (char) 2, (char)44, (char) 0, (char)14, (char)15, (char)13, (char) 0, 
    (char) 7, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, 
    (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char) 0, (char)11, (char) 0, (char)12, (char) 0, (char) 0, 
    (char) 0, (char)24, (char)38, (char)32, (char)19, (char)34, (char)39, (char)35, (char)37, (char)20, (char) 0, (char) 0, (char)28, (char)22, (char)25, (char)23, 
    (char)31, (char) 0, (char)26, (char)29, (char)30, (char)33, (char)21, (char)36, (char)43, (char) 0, (char)40, (char) 0, (char)27, (char) 0, (char) 0, (char) 0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static readonly int [] ZZ_ACTION;

  private static readonly ushort[] ZZ_ACTION_PACKED_0 = new ushort[] {
    1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7,
    1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15,
    1, 16, 1, 4, 1, 17, 1, 18, 6, 1, 1, 19, 7, 1, 2, 4,
    1, 0, 1, 3, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 3, 1,
    1, 25, 23, 1, 1, 0, 1, 26, 1, 0, 1, 1, 1, 27, 1, 28,
    1, 1, 1, 29, 1, 30, 37, 1, 1, 0, 1, 31, 8, 1, 1, 0,
    1, 32, 22, 1, 2, 0, 1, 1, 1, 0, 1, 33, 4, 1, 1, 0,
    1, 34, 1, 0, 1, 35, 3, 1, 2, 0, 1, 1, 1, 0, 1, 36,
    2, 0, 17, 1, 1, 37, 3, 1, 1, 0, 1, 38, 4, 1, 1, 0,
    1, 39, 1, 1, 1, 40, 7, 1, 1, 0, 1, 41, 1, 1, 2, 0,
    2, 1, 1, 0, 1, 42, 1, 0, 1, 43, 5, 1, 1, 0, 1, 44,
    2, 1, 1, 0, 1, 1, 1, 45, 3, 1, 2, 0, 4, 1, 1, 0,
    1, 46, 1, 1, 1, 0, 1, 47, 13, 1, 1, 0, 1, 48, 2, 1,
    2, 0, 1, 1, 1, 0, 1, 49, 1, 0, 1, 50, 2, 1, 1, 0,
    1, 1, 1, 0, 8, 1, 1, 0, 1, 51, 2, 1, 1, 52, 1, 0,
    1, 53, 2, 1, 1, 0, 1, 1, 1, 54, 2, 0, 1, 1, 1, 0,
    1, 1, 1, 0, 3, 1, 1, 0, 1, 1, 1, 55, 1, 0, 1, 56,
    1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 2, 0, 1, 1, 1, 0,
    1, 1, 1, 0, 1, 57, 1, 1, 1, 0, 1, 1, 1, 58, 1, 0,
    1, 59, 5, 1, 1, 0, 1, 1, 1, 60, 1, 0, 1, 1, 1, 61,
    1, 0, 1, 1, 1, 62, 3, 1, 1, 0, 1, 63, 19, 1, 1, 0,
    1, 64, 1, 0, 1, 65, 15, 1, 1, 0, 1, 66, 1, 0, 1, 67,
    5, 1, 3, 0, 1, 68, 4, 1, 1, 0, 1, 69, 1, 1, 6, 0,
    1, 1, 1, 0, 1, 70, 1, 0, 1, 71, 1, 0, 1, 72, 3, 1,
    2, 0, 1, 73, 0 };

  private static int [] zzUnpackAction() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static readonly int [] ZZ_ROWMAP;

  private static readonly ushort[] ZZ_ROWMAP_PACKED_0 = new ushort[] {
    0, 0, 0, 45, 0, 90, 0, 135, 0, 180, 0, 180, 0, 180, 0, 225,
    0, 180, 0, 180, 0, 180, 0, 180, 0, 180, 0, 180, 0, 0x010e, 0, 0x013b,
    0, 180, 0, 0x0168, 0, 180, 0, 0x0195, 0, 0x01c2, 0, 0x01ef, 0, 0x021c, 0, 0x0249,
    0, 0x0276, 0, 0x02a3, 0, 180, 0, 0x02d0, 0, 0x02fd, 0, 0x032a, 0, 0x0357, 0, 0x0384,
    0, 0x03b1, 0, 0x03de, 0, 0x040b, 0, 0x0438, 0, 0x0465, 0, 0x0492, 0, 180, 0, 180,
    0, 180, 0, 180, 0, 180, 0, 0x04bf, 0, 0x04ec, 0, 0x0519, 0, 45, 0, 0x0546,
    0, 0x0573, 0, 0x05a0, 0, 0x05cd, 0, 0x05fa, 0, 0x0627, 0, 0x0654, 0, 0x0681, 0, 0x06ae,
    0, 0x06db, 0, 0x0708, 0, 0x0735, 0, 0x0762, 0, 0x078f, 0, 0x07bc, 0, 0x07e9, 0, 0x0816,
    0, 0x0843, 0, 0x0870, 0, 0x089d, 0, 0x08ca, 0, 0x08f7, 0, 0x0924, 0, 0x040b, 0, 180,
    0, 0x0438, 0, 0x0951, 0, 180, 0, 45, 0, 0x097e, 0, 45, 0, 45, 0, 0x09ab,
    0, 0x09d8, 0, 0x0a05, 0, 0x0a32, 0, 0x0a5f, 0, 0x0a8c, 0, 0x0ab9, 0, 0x0ae6, 0, 0x0b13,
    0, 0x0b40, 0, 0x0b6d, 0, 0x0b9a, 0, 0x0bc7, 0, 0x0bf4, 0, 0x0c21, 0, 0x0c4e, 0, 0x0c7b,
    0, 0x0ca8, 0, 0x0cd5, 0, 0x0d02, 0, 0x0d2f, 0, 0x0d5c, 0, 0x0d89, 0, 0x0db6, 0, 0x0de3,
    0, 0x0e10, 0, 0x0e3d, 0, 0x0e6a, 0, 0x0e97, 0, 0x0ec4, 0, 0x0ef1, 0, 0x0f1e, 0, 0x0f4b,
    0, 0x0f78, 0, 0x0fa5, 0, 0x0fd2, 0, 0x0fff, 0, 0x102c, 0, 180, 0, 0x1059, 0, 0x1086,
    0, 0x10b3, 0, 0x10e0, 0, 0x110d, 0, 0x113a, 0, 0x1167, 0, 0x1194, 0, 0x11c1, 0, 180,
    0, 0x11ee, 0, 0x121b, 0, 0x1248, 0, 0x1275, 0, 0x12a2, 0, 0x12cf, 0, 0x12fc, 0, 0x1329,
    0, 0x1356, 0, 0x1383, 0, 0x13b0, 0, 0x13dd, 0, 0x140a, 0, 0x1437, 0, 0x1464, 0, 0x1491,
    0, 0x14be, 0, 0x14eb, 0, 0x1518, 0, 0x1545, 0, 0x1572, 0, 0x159f, 0, 0x15cc, 0, 0x15f9,
    0, 0x1626, 0, 0x1653, 0, 180, 0, 0x1680, 0, 0x16ad, 0, 0x16da, 0, 0x1707, 0, 0x1734,
    0, 180, 0, 0x1761, 0, 180, 0, 0x178e, 0, 0x17bb, 0, 0x17e8, 0, 0x1815, 0, 0x1842,
    0, 0x186f, 0, 0x189c, 0, 180, 0, 0x18c9, 0, 0x18f6, 0, 0x1923, 0, 0x1950, 0, 0x197d,
    0, 0x19aa, 0, 0x19d7, 0, 0x1a04, 0, 0x1a31, 0, 0x1a5e, 0, 0x1a8b, 0, 0x1ab8, 0, 0x1ae5,
    0, 0x1b12, 0, 0x1b3f, 0, 0x1b6c, 0, 0x1b99, 0, 0x1bc6, 0, 0x1bf3, 0, 180, 0, 0x1c20,
    0, 0x1c4d, 0, 0x1c7a, 0, 0x1ca7, 0, 180, 0, 0x1cd4, 0, 0x1d01, 0, 0x1d2e, 0, 0x1d5b,
    0, 0x1d88, 0, 180, 0, 0x1db5, 0, 180, 0, 0x1de2, 0, 0x1e0f, 0, 0x1e3c, 0, 0x1e69,
    0, 0x1e96, 0, 0x1ec3, 0, 0x1ef0, 0, 0x1f1d, 0, 180, 0, 0x1f4a, 0, 0x1f77, 0, 0x1fa4,
    0, 0x1fd1, 0, 0x1ffe, 0, 0x202b, 0, 180, 0, 0x2058, 0, 180, 0, 0x2085, 0, 0x20b2,
    0, 0x20df, 0, 0x210c, 0, 0x2139, 0, 0x2166, 0, 180, 0, 0x2193, 0, 0x21c0, 0, 0x21ed,
    0, 0x221a, 0, 180, 0, 0x2247, 0, 0x2274, 0, 0x22a1, 0, 0x22ce, 0, 0x22fb, 0, 0x2328,
    0, 0x2355, 0, 0x2382, 0, 0x23af, 0, 0x23dc, 0, 180, 0, 0x2409, 0, 0x2436, 0, 180,
    0, 0x2463, 0, 0x2490, 0, 0x24bd, 0, 0x24ea, 0, 0x2517, 0, 0x2544, 0, 0x2571, 0, 0x259e,
    0, 0x25cb, 0, 0x25f8, 0, 0x2625, 0, 0x2652, 0, 0x267f, 0, 0x26ac, 0, 180, 0, 0x26d9,
    0, 0x2706, 0, 0x2733, 0, 0x2760, 0, 0x278d, 0, 0x27ba, 0, 180, 0, 0x27e7, 0, 180,
    0, 0x2814, 0, 0x2841, 0, 0x286e, 0, 0x289b, 0, 0x28c8, 0, 0x28f5, 0, 0x2922, 0, 0x294f,
    0, 0x297c, 0, 0x29a9, 0, 0x29d6, 0, 0x2a03, 0, 0x2a30, 0, 0x2a5d, 0, 180, 0, 0x2a8a,
    0, 0x2ab7, 0, 180, 0, 0x2ae4, 0, 180, 0, 0x2b11, 0, 0x2b3e, 0, 0x2b6b, 0, 0x2b98,
    0, 180, 0, 0x2bc5, 0, 0x2bf2, 0, 0x2c1f, 0, 0x2c4c, 0, 0x2c79, 0, 0x2ca6, 0, 0x2cd3,
    0, 0x2d00, 0, 0x2d2d, 0, 0x2d5a, 0, 0x2d87, 0, 180, 0, 0x2db4, 0, 180, 0, 0x2de1,
    0, 0x2e0e, 0, 0x2e3b, 0, 0x2e68, 0, 0x2e95, 0, 0x2ec2, 0, 0x2eef, 0, 0x2f1c, 0, 0x2f49,
    0, 0x2f76, 0, 0x2fa3, 0, 0x2fd0, 0, 180, 0, 0x2ffd, 0, 0x302a, 0, 0x3057, 0, 180,
    0, 0x3084, 0, 180, 0, 0x30b1, 0, 0x30de, 0, 0x310b, 0, 0x3138, 0, 0x3165, 0, 0x3192,
    0, 0x31bf, 0, 180, 0, 0x31ec, 0, 0x3219, 0, 180, 0, 0x3246, 0, 0x3273, 0, 180,
    0, 0x32a0, 0, 0x32cd, 0, 0x32fa, 0, 0x3327, 0, 180, 0, 0x3354, 0, 0x3381, 0, 0x33ae,
    0, 0x33db, 0, 0x3408, 0, 0x3435, 0, 0x3462, 0, 0x348f, 0, 0x34bc, 0, 0x34e9, 0, 0x3516,
    0, 0x3543, 0, 0x3570, 0, 0x359d, 0, 0x35ca, 0, 0x35f7, 0, 0x3624, 0, 0x3651, 0, 0x367e,
    0, 0x36ab, 0, 180, 0, 0x36d8, 0, 180, 0, 0x3705, 0, 0x3732, 0, 0x375f, 0, 0x378c,
    0, 0x37b9, 0, 0x37e6, 0, 0x3813, 0, 0x3840, 0, 0x386d, 0, 0x389a, 0, 0x38c7, 0, 0x38f4,
    0, 0x3921, 0, 0x394e, 0, 0x397b, 0, 0x39a8, 0, 180, 0, 0x39d5, 0, 180, 0, 0x3a02,
    0, 0x3a2f, 0, 0x3a5c, 0, 0x3a89, 0, 0x3ab6, 0, 0x3ae3, 0, 0x3b10, 0, 0x3b3d, 0, 180,
    0, 0x3b6a, 0, 0x3b97, 0, 0x3bc4, 0, 0x3bf1, 0, 0x3c1e, 0, 180, 0, 0x3c4b, 0, 0x3c78,
    0, 0x3ca5, 0, 0x3cd2, 0, 0x3cff, 0, 0x3d2c, 0, 0x3d59, 0, 0x3d86, 0, 0x3db3, 0, 180,
    0, 0x3de0, 0, 180, 0, 0x3e0d, 0, 180, 0, 0x3e3a, 0, 0x3e67, 0, 0x3e94, 0, 0x3ec1,
    0, 0x3eee, 0, 180, 0 };

  private static int [] zzUnpackRowMap() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(ushort[] packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static readonly int [] ZZ_TRANS;

  private static readonly ushort[] ZZ_TRANS_PACKED_0 = new ushort[] {
    1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9,
    1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17,
    1, 18, 1, 19, 1, 20, 1, 21, 2, 2, 1, 22, 1, 23, 1, 24,
    1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32,
    5, 2, 1, 33, 1, 34, 1, 2, 1, 35, 1, 36, 1, 2, 1, 5,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 3, 45, 0, 1, 4,
    3, 0, 1, 38, 85, 0, 1, 38, 3, 0, 1, 39, 53, 0, 1, 40,
    44, 0, 1, 41, 44, 0, 1, 42, 47, 0, 1, 43, 26, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2, 1, 44, 6, 2,
    1, 0, 6, 2, 1, 45, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 46, 3, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 7, 2, 1, 47, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    6, 2, 1, 48, 1, 2, 1, 0, 2, 2, 1, 49, 10, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    4, 2, 1, 50, 1, 51, 2, 2, 1, 0, 5, 2, 1, 52, 7, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 4, 2, 1, 53, 3, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 4, 2,
    1, 54, 1, 55, 2, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    2, 2, 1, 56, 2, 2, 1, 57, 1, 58, 6, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 7, 2,
    1, 59, 1, 0, 6, 2, 1, 60, 6, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 61,
    1, 62, 1, 2, 1, 63, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 64,
    3, 2, 1, 0, 6, 2, 1, 65, 2, 2, 1, 66, 3, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    4, 2, 1, 67, 3, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 68,
    1, 69, 2, 2, 1, 0, 1, 70, 12, 2, 2, 0, 1, 2, 1, 37,
    41, 71, 1, 72, 3, 71, 42, 73, 1, 72, 2, 73, 1, 74, 1, 0,
    1, 74, 1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0,
    13, 74, 2, 0, 1, 74, 3, 0, 1, 38, 42, 0, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 2, 2, 1, 76, 5, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 1, 2, 1, 77, 11, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    1, 78, 7, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 79, 7, 2, 1, 0,
    4, 2, 1, 80, 8, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2, 1, 81,
    10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 1, 82, 6, 2, 1, 83, 1, 0, 2, 2, 1, 84,
    10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 3, 2, 1, 85, 4, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    3, 2, 1, 86, 4, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    5, 2, 1, 87, 7, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 4, 2, 1, 88,
    8, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 6, 2, 1, 89, 1, 2, 1, 0, 1, 2, 1, 90,
    11, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 5, 2, 1, 91, 1, 2, 1, 92, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 3, 2, 1, 93, 4, 2, 1, 0, 10, 2, 1, 94, 2, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 1, 95, 12, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2, 1, 96,
    2, 2, 1, 0, 5, 2, 1, 97, 7, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    13, 2, 2, 0, 1, 98, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 1, 2, 1, 99, 11, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    7, 2, 1, 100, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 101, 3, 2,
    1, 0, 6, 2, 1, 102, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 3, 2, 1, 103, 2, 2,
    1, 104, 1, 2, 1, 0, 5, 2, 1, 105, 7, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2,
    1, 106, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2, 1, 107, 6, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 4, 2, 1, 108, 3, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 1, 109, 12, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    1, 110, 12, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 4, 2, 1, 111, 3, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 74, 1, 0, 1, 74, 1, 0, 1, 74,
    14, 0, 8, 74, 1, 0, 13, 74, 2, 0, 1, 74, 1, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 4, 2,
    1, 112, 8, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 113, 6, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 7, 2, 1, 114, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    6, 2, 1, 115, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 3, 2, 1, 116, 4, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 117, 1, 2, 1, 0,
    1, 2, 4, 0, 1, 118, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 6, 2, 1, 119, 6, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    10, 2, 1, 120, 2, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 121, 1, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 5, 2, 1, 122, 2, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 7, 2, 1, 123, 5, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    2, 2, 1, 124, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 7, 2, 1, 125, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 1, 2, 1, 126, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 127, 1, 2, 1, 0, 1, 2, 4, 0, 1, 128,
    9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 2,
    1, 129, 11, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 11, 2, 1, 130, 1, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 6, 2, 1, 131, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 6, 2, 1, 132, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2,
    1, 133, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 1, 2, 1, 134, 6, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 6, 2, 1, 135, 6, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 4, 2, 1, 136, 8, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 4, 2,
    1, 137, 8, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 3, 2, 1, 138, 4, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 2, 2, 1, 139, 1, 2, 1, 140, 8, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 6, 2, 1, 141, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 1, 142, 12, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 143, 12, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 1, 144, 12, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    1, 145, 12, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 2, 1, 146, 11, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 4, 2, 1, 147, 3, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 6, 2, 1, 148, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 2,
    1, 149, 11, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 1, 2, 1, 150, 6, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 151, 1, 2, 1, 0, 1, 2,
    4, 0, 1, 152, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2,
    1, 153, 2, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 0,
    1, 117, 7, 0, 1, 118, 35, 0, 1, 2, 1, 154, 1, 2, 1, 0,
    1, 2, 4, 0, 1, 155, 9, 0, 8, 2, 1, 0, 1, 2, 1, 156,
    11, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 157, 6, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    1, 158, 7, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 159,
    12, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 160, 1, 2, 1, 0,
    1, 2, 4, 0, 1, 161, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 162, 1, 2, 1, 0, 1, 2, 4, 0,
    1, 163, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    2, 2, 1, 164, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 165, 1, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 127, 7, 0, 1, 128,
    35, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 2, 2, 1, 166, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 167, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 168, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 1, 2, 1, 169, 11, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 170, 1, 2, 1, 0, 1, 2, 4, 0, 1, 171,
    9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 172, 1, 2, 1, 0, 1, 2, 4, 0, 1, 173, 9, 0, 8, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2, 1, 174, 10, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 6, 2, 1, 175, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 6, 2, 1, 176, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2,
    1, 177, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 178, 6, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 5, 2, 1, 179, 2, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2,
    1, 180, 2, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2,
    1, 181, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 1, 2, 1, 182, 6, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 1, 183, 7, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    6, 2, 1, 184, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 185, 3, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 186, 6, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    7, 2, 1, 187, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 188, 1, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2, 1, 189, 10, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 10, 2, 1, 190, 2, 2, 2, 0, 1, 2,
    1, 37, 1, 0, 1, 151, 7, 0, 1, 152, 36, 0, 1, 152, 8, 0,
    1, 191, 34, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 1, 192, 12, 2, 2, 0, 1, 2, 1, 37, 1, 0,
    1, 154, 7, 0, 1, 155, 35, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 3, 2, 1, 193, 9, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    7, 2, 1, 194, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 195, 1, 2, 1, 0, 1, 2, 4, 0, 1, 196, 9, 0, 8, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 197, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 0, 1, 160, 7, 0, 1, 161, 36, 0, 1, 162, 7, 0,
    1, 163, 35, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 1, 2, 1, 198, 11, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    7, 2, 1, 199, 5, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 7, 2, 1, 200, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 0, 1, 167, 42, 0, 1, 201, 1, 74,
    1, 0, 1, 74, 1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74,
    1, 0, 13, 74, 2, 0, 1, 74, 1, 202, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 203, 12, 2, 2, 0,
    1, 2, 1, 37, 1, 0, 1, 170, 7, 0, 1, 171, 36, 0, 1, 172,
    7, 0, 1, 173, 36, 0, 1, 173, 8, 0, 1, 204, 34, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2, 1, 205, 6, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2, 1, 206, 10, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 1, 2, 1, 207, 11, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 208,
    7, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 209, 1, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 1, 2, 1, 210, 6, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 2, 2, 1, 211, 10, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 212, 1, 2, 1, 0, 1, 2, 4, 0, 1, 213, 9, 0,
    8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 214, 1, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 215, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 216,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2, 1, 217,
    2, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 8, 2, 1, 218,
    4, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 219, 1, 2, 1, 0,
    1, 2, 4, 0, 1, 220, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 221, 1, 2, 1, 0, 1, 2, 4, 0,
    1, 222, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 223, 7, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 4, 2, 1, 224, 3, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 5, 2, 1, 225, 7, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2,
    1, 226, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2, 1, 227, 2, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 228, 1, 2,
    1, 0, 1, 2, 4, 0, 1, 229, 9, 0, 8, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 0, 1, 195, 7, 0, 1, 196, 35, 0,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 230,
    1, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 231, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 232, 1, 2, 1, 0, 1, 233, 4, 0,
    1, 234, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2, 1, 235,
    6, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 44, 0, 1, 202,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2, 1, 236,
    2, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 237, 3, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 238, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 239,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    1, 2, 1, 240, 11, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 1, 2, 1, 241, 6, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 2, 2, 1, 242, 10, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    6, 2, 1, 243, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 244, 1, 2, 1, 0, 1, 2, 4, 0, 1, 245, 9, 0,
    8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 212,
    7, 0, 1, 213, 35, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 7, 2, 1, 246, 5, 2, 2, 0, 1, 2,
    1, 37, 1, 0, 1, 215, 42, 0, 1, 247, 1, 74, 1, 0, 1, 74,
    1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74,
    2, 0, 1, 74, 1, 248, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 6, 2, 1, 249, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2,
    1, 250, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 0,
    1, 219, 7, 0, 1, 220, 36, 0, 1, 221, 7, 0, 1, 222, 35, 0,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2, 1, 251,
    2, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 7, 2, 1, 252, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 2, 2, 1, 253, 10, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 12, 2, 1, 254, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 4, 2, 1, 255,
    8, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 228, 7, 0, 1, 229,
    35, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 5, 2,
    1, 0x0100, 2, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 8, 2,
    1, 0x0101, 4, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 232, 7, 0,
    1, 234, 35, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 1, 0x0102, 12, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 0x0103, 1, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2, 1, 0x0104, 10, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 6, 2, 1, 0x0105, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 0, 1, 238, 42, 0, 1, 0x0106, 1, 74, 1, 0, 1, 74,
    1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74,
    2, 0, 1, 74, 1, 0x0107, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 1, 2, 1, 0x0108, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 6, 2,
    1, 0x0109, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0x010a, 1, 2, 1, 0, 1, 2, 4, 0, 1, 0x010b, 9, 0, 8, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 2, 1, 0x010c, 11, 2,
    2, 0, 1, 2, 1, 37, 1, 0, 1, 244, 7, 0, 1, 245, 35, 0,
    1, 2, 1, 0x010d, 1, 2, 1, 0, 1, 2, 4, 0, 1, 0x010e, 9, 0,
    8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 44, 0, 1, 248,
    1, 2, 1, 0x010f, 1, 2, 1, 0, 1, 2, 4, 0, 1, 0x0110, 9, 0,
    8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 0x0111, 1, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 6, 2, 1, 0x0112, 1, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0x0113, 1, 2, 1, 0, 1, 0x0114, 14, 0,
    8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 0x0115, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 0x0116,
    6, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 0x0117, 6, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 6, 2, 1, 0x0118, 6, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 3, 2, 1, 0x0119,
    4, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 1, 2, 1, 0x011a, 6, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 0x011b, 6, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 7, 2, 1, 0x011c, 5, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    6, 2, 1, 0x011d, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0x011e,
    1, 2, 1, 0, 1, 2, 4, 0, 1, 0x011f, 9, 0, 8, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 44, 0, 1, 0x0107, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 0x0120, 1, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 7, 2, 1, 0x0121, 5, 2, 2, 0,
    1, 2, 1, 37, 1, 0, 1, 0x010a, 7, 0, 1, 0x010b, 36, 0, 1, 0x010b,
    8, 0, 1, 0x0122, 34, 0, 1, 2, 1, 0x0123, 1, 2, 1, 0, 1, 2,
    4, 0, 1, 0x0124, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 0, 1, 0x010d, 7, 0, 1, 0x010e, 36, 0, 1, 0x010f, 7, 0,
    1, 0x0110, 35, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 7, 2, 1, 0x0125, 5, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    2, 2, 1, 0x0126, 10, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 0x0113,
    42, 0, 1, 0x0127, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    4, 2, 1, 0x0128, 3, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 74, 1, 0, 1, 74, 1, 0, 1, 74, 12, 0, 1, 75, 1, 0,
    8, 74, 1, 0, 13, 74, 2, 0, 1, 74, 1, 0x0129, 1, 2, 1, 0x012a,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 0x012b, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x012c, 14, 0,
    8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0x012d,
    1, 2, 1, 0, 1, 0x012e, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 0x012f, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 6, 2, 1, 0x0130, 6, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    2, 2, 1, 0x0131, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 6, 2, 1, 0x0132, 1, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0x0133, 1, 2, 1, 0,
    1, 0x0134, 4, 0, 1, 0x0135, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0x0136, 1, 2, 1, 0, 1, 2, 4, 0,
    1, 0x0137, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 0, 1, 0x011e, 7, 0, 1, 0x011f, 35, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 7, 2, 1, 0x0138, 5, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0x0139, 1, 2, 1, 0, 1, 0x013a,
    14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 0x013b, 1, 0,
    1, 0x0123, 7, 0, 1, 0x0124, 35, 0, 1, 2, 1, 0x013c, 1, 2, 1, 0,
    1, 0x013d, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 0x013e,
    1, 2, 1, 0x013f, 1, 2, 1, 0, 1, 0x0140, 14, 0, 8, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 0x0141, 44, 0, 1, 0x0129, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 7, 2, 1, 0x0142, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 0, 1, 0x012a, 42, 0, 1, 0x0143, 1, 74,
    1, 0, 1, 74, 1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74,
    1, 0, 13, 74, 2, 0, 1, 74, 1, 0x0144, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 2, 1, 0x0145, 11, 2,
    2, 0, 1, 2, 1, 37, 1, 0, 1, 0x012d, 42, 0, 1, 0x0146, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 5, 2,
    1, 0x0147, 7, 2, 2, 0, 1, 2, 1, 37, 1, 74, 1, 0, 1, 74,
    1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74,
    2, 0, 1, 74, 1, 0x0148, 1, 2, 1, 0x0149, 1, 2, 1, 0, 1, 2,
    4, 0, 1, 0x014a, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 9, 2, 1, 0x014b, 3, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 7, 2,
    1, 0x014c, 5, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 0x0133, 7, 0,
    1, 0x0135, 35, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    5, 2, 1, 0x014d, 2, 2, 1, 0, 10, 2, 1, 0x014e, 2, 2, 2, 0,
    1, 2, 1, 37, 1, 0, 1, 0x0136, 7, 0, 1, 0x0137, 35, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 0x014f, 14, 0, 8, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 0, 1, 0x0139, 42, 0, 1, 0x0150, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 2,
    1, 0x0151, 11, 2, 2, 0, 1, 2, 1, 37, 1, 74, 1, 0, 1, 74,
    1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74,
    2, 0, 1, 74, 1, 0x0152, 1, 0, 1, 0x013c, 42, 0, 1, 0x0153, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 2,
    1, 0x0154, 11, 2, 2, 0, 1, 2, 1, 37, 1, 74, 1, 0, 1, 74,
    1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74,
    2, 0, 1, 74, 1, 0x0155, 1, 0, 1, 0x013f, 42, 0, 1, 0x0156, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 4, 2, 1, 0x0157, 3, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 74, 1, 0, 1, 74,
    1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74,
    2, 0, 1, 74, 1, 0x0158, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x0159,
    14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 44, 0,
    1, 0x0144, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 3, 2, 1, 0x015a, 9, 2, 2, 0, 1, 2, 1, 37, 44, 0,
    1, 0x0148, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 7, 2,
    1, 0x015b, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 0x0149,
    7, 0, 1, 0x014a, 35, 0, 1, 2, 1, 0x015c, 1, 2, 1, 0, 1, 2,
    4, 0, 1, 0x015d, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 2, 2, 1, 0x015e, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 11, 2,
    1, 0x015f, 1, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 0x0160, 6, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 1, 2, 1, 0x0161, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 44, 0, 1, 0x0152, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 1, 2, 1, 0x0162, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 44, 0, 1, 0x0155, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 1, 2, 1, 0x0163, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 44, 0, 1, 0x0158, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 7, 2, 1, 0x0164, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    1, 2, 1, 0x0165, 11, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 5, 2, 1, 0x0166, 2, 2, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 1, 2, 1, 0x0167, 6, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 0, 1, 0x015c, 7, 0, 1, 0x015d, 35, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 9, 2,
    1, 0x0168, 3, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2, 1, 0x0169, 10, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 11, 2, 1, 0x016a, 1, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 6, 2,
    1, 0x016b, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 10, 2,
    1, 0x016c, 2, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 10, 2, 1, 0x016d, 2, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x016e,
    14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2,
    1, 0x016f, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 4, 2, 1, 0x0170, 8, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0x0171, 1, 2, 1, 0, 1, 2,
    4, 0, 1, 0x0172, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0x0173, 1, 2, 1, 0, 1, 2, 4, 0, 1, 0x0174,
    9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2,
    1, 0x0175, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 4, 2, 1, 0x0176, 3, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 1, 2, 1, 0x0177, 11, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 1, 0x0178, 12, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 1, 0x0179, 12, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 1, 2, 1, 0x017a, 11, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 1, 0x017b, 12, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 6, 2, 1, 0x017c,
    6, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 0x0171, 7, 0, 1, 0x0172,
    36, 0, 1, 0x0173, 7, 0, 1, 0x0174, 35, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 7, 2, 1, 0x017d, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    7, 2, 1, 0x017e, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 2, 2,
    1, 0x017f, 10, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 2, 14, 0, 1, 2, 1, 0x0180, 6, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 1, 2, 1, 0x0181, 6, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 6, 2, 1, 0x0182, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 11, 2,
    1, 0x0183, 1, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0x0184, 1, 2,
    1, 0, 1, 2, 4, 0, 1, 0x0185, 9, 0, 8, 2, 1, 0, 13, 2,
    2, 0, 1, 2, 1, 37, 1, 2, 1, 0x0186, 1, 2, 1, 0, 1, 2,
    4, 0, 1, 0x0187, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 6, 2, 1, 0x0188, 6, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 7, 2, 1, 0x0189, 1, 0,
    13, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 6, 2, 1, 0x018a, 1, 2, 1, 0, 13, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    6, 2, 1, 0x018b, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    1, 0x018c, 12, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0x018d, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 0x018e, 1, 0, 1, 0x0184, 7, 0, 1, 0x0185, 36, 0, 1, 0x0186, 7, 0,
    1, 0x0187, 35, 0, 1, 2, 1, 0x018f, 1, 2, 1, 0, 1, 2, 4, 0,
    1, 0x0190, 9, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0,
    5, 2, 1, 0x0191, 7, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 7, 2, 1, 0x0192,
    5, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 2, 14, 0, 8, 2, 1, 0, 7, 2, 1, 0x0193, 5, 2, 2, 0,
    1, 2, 1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0,
    8, 2, 1, 0, 11, 2, 1, 0x0194, 1, 2, 2, 0, 1, 2, 1, 37,
    1, 0, 1, 0x018d, 42, 0, 1, 0x0195, 1, 74, 1, 0, 1, 74, 1, 0,
    1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74, 2, 0,
    1, 74, 1, 0x0196, 1, 0, 1, 0x018f, 7, 0, 1, 0x0190, 35, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 4, 2,
    1, 0x0197, 8, 2, 2, 0, 1, 2, 1, 37, 1, 2, 1, 0x0198, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 0x0199, 1, 2, 1, 0x019a, 1, 2, 1, 0, 1, 2, 14, 0, 8, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 0x019b, 1, 2, 1, 0x019c, 1, 2,
    1, 0, 1, 2, 14, 0, 8, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 0x019d, 44, 0, 1, 0x0196, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 8, 2, 1, 0, 2, 2, 1, 0x019e, 10, 2, 2, 0, 1, 2,
    1, 37, 1, 0, 1, 0x0198, 42, 0, 1, 0x019f, 1, 74, 1, 0, 1, 74,
    1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74, 1, 0, 13, 74,
    2, 0, 1, 74, 1, 0x01a0, 1, 0, 1, 0x019a, 42, 0, 1, 0x01a1, 1, 74,
    1, 0, 1, 74, 1, 0, 1, 74, 12, 0, 1, 75, 1, 0, 8, 74,
    1, 0, 13, 74, 2, 0, 1, 74, 1, 0x01a2, 1, 0, 1, 0x019c, 42, 0,
    1, 0x01a3, 1, 74, 1, 0, 1, 74, 1, 0, 1, 74, 12, 0, 1, 75,
    1, 0, 8, 74, 1, 0, 13, 74, 2, 0, 1, 74, 1, 0x01a4, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 1, 2, 1, 0x01a5, 6, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 44, 0, 1, 0x01a0, 44, 0,
    1, 0x01a2, 44, 0, 1, 0x01a4, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2,
    14, 0, 4, 2, 1, 0x01a6, 3, 2, 1, 0, 13, 2, 2, 0, 1, 2,
    1, 37, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 14, 0, 6, 2,
    1, 0x01a7, 1, 2, 1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 2,
    1, 0x01a8, 1, 2, 1, 0, 1, 2, 4, 0, 1, 0x01a9, 9, 0, 8, 2,
    1, 0, 13, 2, 2, 0, 1, 2, 1, 37, 1, 0, 1, 0x01a8, 7, 0,
    1, 0x01a9, 36, 0, 1, 0x01a9, 8, 0, 1, 0x01aa, 34, 0, 0 };

  private static int [] zzUnpackTrans() {
    int [] result = new int[16155];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly String[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static readonly int [] ZZ_ATTRIBUTE;

  private static readonly ushort[] ZZ_ATTRIBUTE_PACKED_0 = new ushort[] {
    1, 0, 3, 1, 3, 9, 1, 1, 6, 9, 2, 1, 1, 9, 1, 1,
    1, 9, 7, 1, 1, 9, 9, 1, 1, 0, 1, 1, 5, 9, 27, 1,
    1, 0, 1, 9, 1, 0, 1, 1, 1, 9, 41, 1, 1, 0, 1, 9,
    8, 1, 1, 0, 1, 9, 22, 1, 2, 0, 1, 1, 1, 0, 1, 9,
    4, 1, 1, 0, 1, 9, 1, 0, 1, 9, 3, 1, 2, 0, 1, 1,
    1, 0, 1, 9, 2, 0, 17, 1, 1, 9, 3, 1, 1, 0, 1, 9,
    4, 1, 1, 0, 1, 9, 1, 1, 1, 9, 7, 1, 1, 0, 1, 9,
    1, 1, 2, 0, 2, 1, 1, 0, 1, 9, 1, 0, 1, 9, 5, 1,
    1, 0, 1, 9, 2, 1, 1, 0, 1, 1, 1, 9, 3, 1, 2, 0,
    4, 1, 1, 0, 1, 9, 1, 1, 1, 0, 1, 9, 13, 1, 1, 0,
    1, 9, 2, 1, 2, 0, 1, 1, 1, 0, 1, 9, 1, 0, 1, 9,
    2, 1, 1, 0, 1, 1, 1, 0, 8, 1, 1, 0, 1, 9, 2, 1,
    1, 9, 1, 0, 1, 9, 2, 1, 1, 0, 1, 1, 1, 9, 2, 0,
    1, 1, 1, 0, 1, 1, 1, 0, 3, 1, 1, 0, 1, 1, 1, 9,
    1, 0, 1, 9, 1, 1, 1, 0, 1, 1, 2, 0, 1, 1, 2, 0,
    1, 1, 1, 0, 1, 1, 1, 0, 1, 9, 1, 1, 1, 0, 1, 1,
    1, 9, 1, 0, 1, 9, 5, 1, 1, 0, 1, 1, 1, 9, 1, 0,
    1, 1, 1, 9, 1, 0, 1, 1, 1, 9, 3, 1, 1, 0, 1, 9,
    19, 1, 1, 0, 1, 9, 1, 0, 1, 9, 15, 1, 1, 0, 1, 9,
    1, 0, 1, 9, 5, 1, 3, 0, 1, 9, 4, 1, 1, 0, 1, 9,
    1, 1, 6, 0, 1, 1, 1, 0, 1, 9, 1, 0, 1, 9, 1, 0,
    1, 9, 3, 1, 2, 0, 1, 9, 0 };

  private static int [] zzUnpackAttribute() {
    int [] result = new int[426];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private System.IO.TextReader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private bool zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private bool zzEOFDone;

  /* user code: */

  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }

  int isName; 
  NameType name;
  FuncName fname; 
  Ntest ntest;
  AxisType at;
  int len;
  String literal;
  Double number; 
  int colonPosition;




  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
  internal Yylex(TextReader @in) {
  	isName = 1;
	colonPosition = -1;
    this.zzReader = @in;
  }

  /**
   * Creates a new scanner.
   * There is also TextReader version of this constructor.
   *
   * @param   in  the System.IO.Stream to read input from.
   */
  internal Yylex(Stream @in) : this(new StreamReader(@in))
  {
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      Array.Copy(zzBuffer, zzStartRead,
                 zzBuffer, 0,
                 zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzCurrentPos*2];
      Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.Read(zzBuffer, zzEndRead,
                                            zzBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.Close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public void yyreset(System.IO.TextReader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Exception(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  public TUVienna.CS_CUP.Runtime.Symbol next_token() {
    int zzInput = 0;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


        while (true) {
          goto zzForAction_skip;
        zzForAction: break;
        zzForAction_skip:
          if (!ZZ_SPURIOUS_WARNINGS_SUCK) goto zzForAction;
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            goto zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            bool eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
            goto zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) goto zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) goto zzForAction;
          }

        }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 78 "scanner_cs.flex"
     isName = 1 ; /*System.out.println( "[ returned");*/ return sym(LB);
#line default
          }
          break;
        case 31: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 288 "scanner_cs.flex"
                	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NOT;
				fname = new FuncName();
				fname.i = FuncName.NOT;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 73: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 400 "scanner_cs.flex"
                                        
						isName = 0;
						ntest = new Ntest();
						ntest.i = Ntest.PROCESSING_INSTRUCTION;
						ntest.arg = null;
						return sym(NTEST,ntest);
					
#line default
          }
          break;
        case 46: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 208 "scanner_cs.flex"
                   	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONCAT;
				fname = new FuncName();
				fname.i = FuncName.CONCAT;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 53: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 224 "scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONTAINS;
				fname = new FuncName();
				fname.i = FuncName.CONTAINS;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 4: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 539 "scanner_cs.flex"
    	
			throw new XPathParseException("Invalid char in XPath Expression");
		
#line default
          }
          break;
        case 40: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 376 "scanner_cs.flex"
                      	
				isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.TEXT;
				ntest.arg = null;
				return sym(NTEST,ntest);
			
#line default
          }
          break;
        case 47: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 427 "scanner_cs.flex"
               	isName = 1;
				at = new AxisType();
				at.i = AxisType.CHILD;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 17: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 87 "scanner_cs.flex"
     if (isName ==0){
		isName = 1;
		//System.out.println("returned a MULT");
		return  sym(MULT);
	}
	 else {
		isName = 0;
		name = new NameType();
		name.qname = "*";
		return sym(NAME,name);
	 }	 
	
#line default
          }
          break;
        case 14: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 80 "scanner_cs.flex"
     isName = 1 ; return sym(GT);
#line default
          }
          break;
        case 23: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 85 "scanner_cs.flex"
      isName = 1 ; return sym(NE);
#line default
          }
          break;
        case 70: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 475 "scanner_cs.flex"
                          	isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING_SIBLING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 72: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 439 "scanner_cs.flex"
                           	isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT_OR_SELF;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 38: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 352 "scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND;
				fname = new FuncName();
				fname.i = FuncName.ROUND;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 25: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 144 "scanner_cs.flex"
         if (isName == 0) {	
		 isName = 1 ;
		 return sym(OR);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "or";
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 1: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 506 "scanner_cs.flex"
             	
				
				isName = 0;
				name = new NameType();
				//name.qname = new String(yytext());
				//System.out.println("returned a NAME ==>" + yytext());
				//if (yytext().charAt(0) =='-'){
				//    throw new XPathParseException("Invalid char in name token:"+yytext());
				//}
				
				name.qname = String.Copy(yytext());
				if (!XMLChar.isNCNameStartChar(name.qname[0]))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<name.qname.Length;i++){
					if (!XMLChar.isNCNameChar(name.qname[i]) 
						&& name.qname[i]!=':' )
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
					if (name.qname[i]==':'){
						colonPosition = i;
					}
				}
		
				if (colonPosition != -1){
					name.prefix = yytext().Substring(0,colonPosition);
					name.localname = yytext().Substring(colonPosition+1);				
				}
				
				colonPosition = -1;
				return sym(NAME,name);
			
#line default
          }
          break;
        case 52: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 384 "scanner_cs.flex"
                         
				isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.COMMENT;
				ntest.arg =  null;
				return sym(NTEST,ntest);
			
#line default
          }
          break;
        case 57: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 421 "scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.ATTRIBUTE;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 41: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 170 "scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.COUNT;
				fname = new FuncName();
				fname.i = FuncName.COUNT;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 8: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 73 "scanner_cs.flex"
     isName = 1 ; return sym(AT);
#line default
          }
          break;
        case 66: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 264 "scanner_cs.flex"
                           	isName =1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NORMALIZE_SPACE;
				fname = new FuncName();
				fname.i = FuncName.NORMALIZE_SPACE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 67: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 240 "scanner_cs.flex"
                           	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_AFTER;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_AFTER;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 2: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 67 "scanner_cs.flex"
        /* eat white space */
#line default
          }
          break;
        case 19: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 155 "scanner_cs.flex"
     isName = 1 ; return sym(UNION) ; 
#line default
          }
          break;
        case 3: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 369 "scanner_cs.flex"
              
				isName = 0;
				number = double.Parse(yytext());
				//System.out.println("number returned ==> "+ Double.parseDouble(yytext()));
				return sym(NUMBER,number);
			
#line default
          }
          break;
        case 51: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 163 "scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.POSITION;
				fname = new FuncName();
				fname.i = FuncName.POSITION;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 68: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 232 "scanner_cs.flex"
                             	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_BEFORE;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_BEFORE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 16: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 84 "scanner_cs.flex"
     isName = 1 ; return sym(EQ);
#line default
          }
          break;
        case 18: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 100 "scanner_cs.flex"
     isName = 1 ; 
	 //System.out.println("SLASH returned ");
	 return sym(SLASH);
	
#line default
          }
          break;
        case 59: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 177 "scanner_cs.flex"
                      	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.LOCAL_NAME;
				fname = new FuncName();
				fname.i = FuncName.LOCAL_NAME;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 34: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 312 "scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LANG;
				fname = new FuncName();
				fname.i = FuncName.LANG;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 37: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 392 "scanner_cs.flex"
                      
				isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.NODE;
				ntest.arg = null;
				return sym(NTEST,ntest);
			
#line default
          }
          break;
        case 55: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 248 "scanner_cs.flex"
                     	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 7: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 71 "scanner_cs.flex"
     isName = 0 ; /*System.out.println(". returned ");*/ return sym(DOT);
#line default
          }
          break;
        case 15: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 81 "scanner_cs.flex"
     isName = 1 ; return sym(LT);
#line default
          }
          break;
        case 54: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 408 "scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 61: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 445 "scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 35: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 157 "scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				fname = new FuncName();
				fname.i = FuncName.LAST;
				return sym(FNAME,fname);				 
			
#line default
          }
          break;
        case 50: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 280 "scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.BOOLEAN;
				fname = new FuncName();
				fname.i = FuncName.BOOLEAN;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 65: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 256 "scanner_cs.flex"
                         	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STRING_LENGTH;
				fname = new FuncName();
				fname.i = FuncName.STRING_LENGTH;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 49: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 344 "scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CEILING;
				fname = new FuncName();
				fname.i = FuncName.CEILING;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 42: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 304 "scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FALSE;
				fname = new FuncName();
				fname.i = FuncName.FALSE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 11: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 77 "scanner_cs.flex"
     isName = 0 ; return sym(RP);
#line default
          }
          break;
        case 44: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 320 "scanner_cs.flex"
                   	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NUMBER;
				fname = new FuncName();
				fname.i = FuncName.NUMBER;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 21: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 82 "scanner_cs.flex"
      isName = 1 ; return sym(GE);
#line default
          }
          break;
        case 28: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 110 "scanner_cs.flex"
          if (isName == 0 ) {
		  isName = 1 ;
		 return sym(DIV);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "div";
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 64: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 184 "scanner_cs.flex"
                         	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAMESPACE_URI;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 33: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 191 "scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAME;
				fname = new FuncName();
				fname.i = FuncName.NAME;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 39: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 481 "scanner_cs.flex"
              	isName = 1;
				at = new AxisType();
				at.i = AxisType.SELF;
				//System.out.println("SELF:: returned");
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 71: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 451 "scanner_cs.flex"
                           	isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING_SIBLING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 36: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 296 "scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRUE;
				fname = new FuncName();
				fname.i = FuncName.TRUE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 43: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 336 "scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FLOOR;
				fname = new FuncName();
				fname.i = FuncName.FLOOR;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 48: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 463 "scanner_cs.flex"
                	isName = 1;
				at = new AxisType();
				at.i = AxisType.PARENT;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 32: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 328 "scanner_cs.flex"
                	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUM;
				fname = new FuncName();
				fname.i = FuncName.SUM;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 13: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 79 "scanner_cs.flex"
     isName = 0 ; return sym(RB);
#line default
          }
          break;
        case 69: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 414 "scanner_cs.flex"
                         	isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR_OR_SELF;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 45: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 199 "scanner_cs.flex"
                   	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.STRING;
				fname = new FuncName();
				fname.i = FuncName.STRING;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 6: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 69 "scanner_cs.flex"
      isName = 1 ; return sym(ADD);
#line default
          }
          break;
        case 60: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 469 "scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 10: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 76 "scanner_cs.flex"
     isName = 1 ; return sym(LP);
#line default
          }
          break;
        case 30: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 133 "scanner_cs.flex"
          if (isName == 0) {
		isName = 1 ;
		 return sym(AND);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "add";
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 29: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 121 "scanner_cs.flex"
          if (isName == 0) {
		  isName = 1 ;
		 return sym(MOD);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "mod";
		 //System.out.println("returned a NAME "+yytext());
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 58: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 457 "scanner_cs.flex"
                  	isName =0;
				at = new AxisType();
				at.i = AxisType.NAMESPACE;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 5: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 70 "scanner_cs.flex"
    isName = 1 ; return sym(SUB);
#line default
          }
          break;
        case 22: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 83 "scanner_cs.flex"
      isName = 1 ; return sym(LE);
#line default
          }
          break;
        case 20: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 72 "scanner_cs.flex"
       isName = 0 ; return sym(DDOT);
#line default
          }
          break;
        case 9: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 75 "scanner_cs.flex"
     isName = 1 ; return sym(COMMA);
#line default
          }
          break;
        case 56: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 272 "scanner_cs.flex"
                     	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRANSLATE;
				fname = new FuncName();
				fname.i = FuncName.TRANSLATE;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 63: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 216 "scanner_cs.flex"
                       	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STARTS_WITH;
				fname = new FuncName();
				fname.i = FuncName.STARTS_WITH;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 62: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 433 "scanner_cs.flex"
                   	isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 27: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 488 "scanner_cs.flex"
                  	isName = 0;
				len = yytext().Length;
				name = new NameType();
                               if (!XMLChar.isNCNameStartChar(yytext()[0]))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<len-2;i++){
					if (!XMLChar.isNCNameChar(yytext()[i]))
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
				}

				name.prefix = yytext().Substring(0,len-2);
                name.localname = "*"; //Console.WriteLine("Name "+name.qname+ " returned");
				//System.out.println("NAME "+name+ " returned");
				return sym(NAME,name);
			
#line default
          }
          break;
        case 24: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 105 "scanner_cs.flex"
              isName = 1; //Console.WriteLine("DSLASH detected");
	 //System.out.println("DSLASH returned "); 
	 return sym(DSLASH);
	
#line default
          }
          break;
        case 26: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 361 "scanner_cs.flex"
           
				isName = 0;
				len = yytext().Length;
				literal = yytext().Substring(1, len-1);
				return sym(LITERAL,literal);
			
#line default
          }
          break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              { return new TUVienna.CS_CUP.Runtime.Symbol(com.ximpleware.xpath.sym.EOF); }
              break;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
          break;
      }
    }
  }


}
#line 543 "scanner_cs.flex"
}

#line default
