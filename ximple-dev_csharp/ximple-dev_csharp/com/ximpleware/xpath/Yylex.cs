/* The following code was generated by CSFlex 1.4 on 8/18/2009 */

#line 1 "D:\new_cvs\ximple-dev_csharp2\ximple-dev_csharp2\com\ximpleware\xpath\scanner_cs.flex"
/* 
 * Copyright (C) 2002-2009 XimpleWare, info@ximpleware.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

namespace com.ximpleware.xpath {


using System;
using System.Collections;
using System.IO;
using System.Text;
using TUVienna.CS_CUP.Runtime;
using com.ximpleware.parser;


#line default
/**
 * This class is a scanner generated by <a href="http://www.sourceforge.net/projects/csflex/">C# Flex</a>, based on
 * <a href="http://www.jflex.de/">JFlex</a>, version 1.4
 * on 8/18/2009 from the specification file
 * <tt>D:/new_cvs/ximple-dev_csharp2/ximple-dev_csharp2/com/ximpleware/xpath/scanner_cs.flex</tt>
 */
class Yylex: sym, Scanner {
  /** This character denotes the end of file */
  public const int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private const int ZZ_BUFFERSIZE = 16384;
  /**
   * This is used in 'if' statements to eliminate dead code
   * warnings for 'break;' after the end of a user action
   * block of code. The Java version does this by emitting
   * a second 'case' which is impossible to reach. Since this
   * is impossible for the compiler to deduce during semantic
   * analysis, the warning is stifled. However, C# does not
   * permit 'case' blocks to flow into each other, so the C#
   * output mode needs a different approach. In this case,
   * the entire user code is wrapped up in an 'if' statement
   * whose condition is always true. No warning is emitted
   * because the compiler doesn't strictly propagate the value
   * of 'static readonly' fields, and thus does not semantically
   * detect the fact that the 'if' will always be true.
   */
   public static readonly bool ZZ_SPURIOUS_WARNINGS_SUCK = true;

  /** lexical states */
  public const int YYINITIAL = 0;
  static Yylex()
  {
    ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    ZZ_ACTION = zzUnpackAction();
    ZZ_ROWMAP = zzUnpackRowMap();
    ZZ_TRANS = zzUnpackTrans();
    ZZ_ATTRIBUTE = zzUnpackAttribute();
  }


  /** 
   * Translates characters to character classes
   */
  private static readonly ushort[] ZZ_CMAP_PACKED = new ushort[] {
    9, 0, 1, 1, 1, 1, 2, 0, 1, 1, 18, 0, 1, 1, 1, 16, 1, 44, 1, 0,
    1, 3, 1, 0, 1, 0, 1, 45, 1, 9, 1, 10, 1, 17, 1, 6, 1, 8, 1, 4,
    1, 5, 1, 18, 10, 2, 1, 46, 1, 0, 1, 14, 1, 15, 1, 13, 1, 0, 1, 7,
    13, 0, 1, 42, 2, 0, 1, 41, 9, 0, 1, 11, 1, 0, 1, 12, 1, 0, 1, 0,
    1, 0, 1, 24, 1, 38, 1, 32, 1, 19, 1, 34, 1, 39, 1, 35, 1, 37, 1, 20,
    2, 0, 1, 28, 1, 22, 1, 25, 1, 23, 1, 31, 1, 0, 1, 26, 1, 29, 1, 30,
    1, 33, 1, 21, 1, 36, 1, 43, 1, 0, 1, 40, 1, 0, 1, 27, 0xff83, 0, 0 };

  /** 
   * Translates characters to character classes
   */
  private static readonly char[] ZZ_CMAP;

  /** 
   * Translates DFA states to action switch labels.
   */
  private static readonly int [] ZZ_ACTION;

  private static readonly ushort[] ZZ_ACTION_PACKED_0 = new ushort[] {
    1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7,
    1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15,
    1, 16, 1, 4, 1, 17, 1, 18, 7, 1, 1, 19, 10, 1, 2, 4,
    1, 0, 2, 3, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 4, 1,
    1, 25, 29, 1, 1, 0, 1, 26, 1, 0, 1, 1, 1, 27, 1, 28,
    2, 1, 1, 29, 1, 30, 45, 1, 1, 0, 1, 31, 2, 1, 1, 0,
    1, 32, 10, 1, 1, 0, 1, 33, 30, 1, 2, 0, 1, 1, 1, 0,
    1, 34, 6, 1, 1, 0, 1, 35, 1, 0, 1, 36, 3, 1, 2, 0,
    1, 1, 1, 0, 1, 37, 2, 0, 25, 1, 1, 38, 3, 1, 1, 0,
    1, 1, 1, 39, 6, 1, 1, 0, 1, 40, 1, 1, 1, 41, 9, 1,
    1, 0, 1, 42, 1, 1, 2, 0, 6, 1, 1, 0, 1, 43, 1, 0,
    1, 44, 1, 0, 1, 45, 6, 1, 1, 0, 1, 46, 5, 1, 1, 0,
    1, 1, 1, 47, 3, 1, 2, 0, 6, 1, 1, 0, 1, 48, 1, 1,
    1, 0, 1, 49, 21, 1, 1, 0, 1, 50, 3, 1, 3, 0, 1, 51,
    1, 1, 1, 0, 1, 52, 4, 1, 1, 0, 1, 53, 3, 1, 1, 0,
    1, 1, 1, 0, 11, 1, 1, 0, 1, 54, 3, 1, 1, 55, 1, 0,
    1, 56, 7, 1, 1, 0, 1, 1, 1, 57, 2, 0, 1, 1, 1, 0,
    1, 1, 1, 0, 6, 1, 1, 0, 1, 1, 1, 58, 1, 0, 1, 59,
    1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1, 0, 1, 60, 2, 1,
    1, 0, 1, 1, 2, 0, 1, 1, 2, 0, 1, 61, 1, 1, 1, 0,
    1, 62, 1, 1, 1, 0, 1, 1, 1, 63, 2, 1, 1, 0, 1, 1,
    1, 64, 1, 0, 1, 65, 5, 1, 1, 0, 1, 1, 1, 66, 1, 1,
    1, 0, 1, 67, 2, 1, 1, 0, 1, 1, 1, 68, 1, 0, 1, 1,
    1, 69, 6, 1, 1, 0, 1, 70, 28, 1, 1, 0, 1, 1, 1, 71,
    1, 1, 1, 0, 1, 72, 1, 1, 1, 0, 1, 73, 20, 1, 1, 0,
    1, 74, 4, 1, 1, 0, 1, 75, 5, 1, 1, 0, 1, 76, 4, 1,
    1, 0, 1, 77, 2, 1, 2, 0, 5, 1, 1, 0, 1, 78, 5, 1,
    1, 0, 1, 79, 2, 1, 1, 0, 1, 80, 3, 1, 2, 0, 1, 1,
    4, 0, 2, 1, 1, 0, 1, 81, 2, 1, 1, 0, 1, 82, 1, 1,
    1, 0, 1, 83, 1, 0, 1, 84, 12, 1, 1, 0, 1, 85, 1, 1,
    1, 0, 1, 86, 2, 1, 2, 0, 2, 1, 1, 87, 1, 0, 1, 88,
    1, 0, 1, 89, 0 };

  private static int [] zzUnpackAction() {
    int [] result = new int[611];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static readonly int [] ZZ_ROWMAP;

  private static readonly ushort[] ZZ_ROWMAP_PACKED_0 = new ushort[] {
    0, 0, 0, 47, 0, 94, 0, 141, 0, 188, 0, 188, 0, 235, 0, 188,
    0, 188, 0, 188, 0, 188, 0, 188, 0, 188, 0, 188, 0, 0x011a, 0, 0x0149,
    0, 188, 0, 0x0178, 0, 188, 0, 0x01a7, 0, 0x01d6, 0, 0x0205, 0, 0x0234, 0, 0x0263,
    0, 0x0292, 0, 0x02c1, 0, 0x02f0, 0, 188, 0, 0x031f, 0, 0x034e, 0, 0x037d, 0, 0x03ac,
    0, 0x03db, 0, 0x040a, 0, 0x0439, 0, 0x0468, 0, 0x0497, 0, 0x04c6, 0, 0x04f5, 0, 0x0524,
    0, 0x0553, 0, 0x0582, 0, 0x05b1, 0, 47, 0, 188, 0, 188, 0, 188, 0, 188,
    0, 0x05e0, 0, 0x060f, 0, 0x063e, 0, 0x066d, 0, 47, 0, 0x069c, 0, 0x06cb, 0, 0x06fa,
    0, 0x0729, 0, 0x0758, 0, 0x0787, 0, 0x07b6, 0, 0x07e5, 0, 0x0814, 0, 0x0843, 0, 0x0872,
    0, 0x08a1, 0, 0x08d0, 0, 0x08ff, 0, 0x092e, 0, 0x095d, 0, 0x098c, 0, 0x09bb, 0, 0x09ea,
    0, 0x0a19, 0, 0x0a48, 0, 0x0a77, 0, 0x0aa6, 0, 0x0ad5, 0, 0x0b04, 0, 0x0b33, 0, 0x0b62,
    0, 0x0b91, 0, 0x0bc0, 0, 0x04f5, 0, 188, 0, 0x0524, 0, 0x0bef, 0, 188, 0, 47,
    0, 0x0c1e, 0, 0x0c4d, 0, 47, 0, 47, 0, 0x0c7c, 0, 0x0cab, 0, 0x0cda, 0, 0x0d09,
    0, 0x0d38, 0, 0x0d67, 0, 0x0d96, 0, 0x0dc5, 0, 0x0df4, 0, 0x0e23, 0, 0x0e52, 0, 0x0e81,
    0, 0x0eb0, 0, 0x0edf, 0, 0x0f0e, 0, 0x0f3d, 0, 0x0f6c, 0, 0x0f9b, 0, 0x0fca, 0, 0x0ff9,
    0, 0x1028, 0, 0x1057, 0, 0x1086, 0, 0x10b5, 0, 0x10e4, 0, 0x1113, 0, 0x1142, 0, 0x1171,
    0, 0x11a0, 0, 0x11cf, 0, 0x11fe, 0, 0x122d, 0, 0x125c, 0, 0x128b, 0, 0x12ba, 0, 0x12e9,
    0, 0x1318, 0, 0x1347, 0, 0x1376, 0, 0x13a5, 0, 0x13d4, 0, 0x1403, 0, 0x1432, 0, 0x1461,
    0, 0x1490, 0, 0x14bf, 0, 188, 0, 0x14ee, 0, 0x151d, 0, 0x154c, 0, 188, 0, 0x157b,
    0, 0x15aa, 0, 0x15d9, 0, 0x1608, 0, 0x1637, 0, 0x1666, 0, 0x1695, 0, 0x16c4, 0, 0x16f3,
    0, 0x1722, 0, 0x1751, 0, 188, 0, 0x1780, 0, 0x17af, 0, 0x17de, 0, 0x180d, 0, 0x183c,
    0, 0x186b, 0, 0x189a, 0, 0x18c9, 0, 0x18f8, 0, 0x1927, 0, 0x1956, 0, 0x1985, 0, 0x19b4,
    0, 0x19e3, 0, 0x1a12, 0, 0x1a41, 0, 0x1a70, 0, 0x1a9f, 0, 0x1ace, 0, 0x1afd, 0, 0x1b2c,
    0, 0x1b5b, 0, 0x1b8a, 0, 0x1bb9, 0, 0x1be8, 0, 0x1c17, 0, 0x1c46, 0, 0x1c75, 0, 0x1ca4,
    0, 0x1cd3, 0, 0x1d02, 0, 0x1d31, 0, 0x1d60, 0, 0x1d8f, 0, 188, 0, 0x1dbe, 0, 0x1ded,
    0, 0x1e1c, 0, 0x1e4b, 0, 0x1e7a, 0, 0x1ea9, 0, 0x1ed8, 0, 188, 0, 0x1f07, 0, 188,
    0, 0x1f36, 0, 0x1f65, 0, 0x1f94, 0, 0x1fc3, 0, 0x1ff2, 0, 0x2021, 0, 0x2050, 0, 188,
    0, 0x207f, 0, 0x20ae, 0, 0x20dd, 0, 0x210c, 0, 0x213b, 0, 0x216a, 0, 0x2199, 0, 0x21c8,
    0, 0x21f7, 0, 0x2226, 0, 0x2255, 0, 0x2284, 0, 0x22b3, 0, 0x22e2, 0, 0x2311, 0, 0x2340,
    0, 0x236f, 0, 0x239e, 0, 0x23cd, 0, 0x23fc, 0, 0x242b, 0, 0x245a, 0, 0x2489, 0, 0x24b8,
    0, 0x24e7, 0, 0x2516, 0, 0x2545, 0, 188, 0, 0x2574, 0, 0x25a3, 0, 0x25d2, 0, 0x2601,
    0, 0x2630, 0, 188, 0, 0x265f, 0, 0x268e, 0, 0x26bd, 0, 0x26ec, 0, 0x271b, 0, 0x274a,
    0, 0x2779, 0, 188, 0, 0x27a8, 0, 188, 0, 0x27d7, 0, 0x2806, 0, 0x2835, 0, 0x2864,
    0, 0x2893, 0, 0x28c2, 0, 0x28f1, 0, 0x2920, 0, 0x294f, 0, 0x297e, 0, 188, 0, 0x29ad,
    0, 0x29dc, 0, 0x2a0b, 0, 0x2a3a, 0, 0x2a69, 0, 0x2a98, 0, 0x2ac7, 0, 0x2af6, 0, 0x2b25,
    0, 0x2b54, 0, 188, 0, 0x2b83, 0, 188, 0, 0x2bb2, 0, 188, 0, 0x2be1, 0, 0x2c10,
    0, 0x2c3f, 0, 0x2c6e, 0, 0x2c9d, 0, 0x2ccc, 0, 0x2cfb, 0, 188, 0, 0x2d2a, 0, 0x2d59,
    0, 0x2d88, 0, 0x2db7, 0, 0x2de6, 0, 0x2e15, 0, 0x2e44, 0, 188, 0, 0x2e73, 0, 0x2ea2,
    0, 0x2ed1, 0, 0x2f00, 0, 0x2f2f, 0, 0x2f5e, 0, 0x2f8d, 0, 0x2fbc, 0, 0x2feb, 0, 0x301a,
    0, 0x3049, 0, 0x3078, 0, 188, 0, 0x30a7, 0, 0x30d6, 0, 188, 0, 0x3105, 0, 0x3134,
    0, 0x3163, 0, 0x3192, 0, 0x31c1, 0, 0x31f0, 0, 0x321f, 0, 0x324e, 0, 0x327d, 0, 0x32ac,
    0, 0x32db, 0, 0x330a, 0, 0x3339, 0, 0x3368, 0, 0x3397, 0, 0x33c6, 0, 0x33f5, 0, 0x3424,
    0, 0x3453, 0, 0x3482, 0, 0x34b1, 0, 0x34e0, 0, 188, 0, 0x350f, 0, 0x353e, 0, 0x356d,
    0, 0x359c, 0, 0x35cb, 0, 0x35fa, 0, 188, 0, 0x3629, 0, 0x3658, 0, 188, 0, 0x3687,
    0, 0x36b6, 0, 0x36e5, 0, 0x3714, 0, 0x3743, 0, 188, 0, 0x3772, 0, 0x37a1, 0, 0x37d0,
    0, 0x37ff, 0, 0x382e, 0, 0x385d, 0, 0x388c, 0, 0x38bb, 0, 0x38ea, 0, 0x3919, 0, 0x3948,
    0, 0x3977, 0, 0x39a6, 0, 0x39d5, 0, 0x3a04, 0, 0x3a33, 0, 0x3a62, 0, 0x3a91, 0, 188,
    0, 0x3ac0, 0, 0x3aef, 0, 0x3b1e, 0, 188, 0, 0x3b4d, 0, 188, 0, 0x3b7c, 0, 0x3bab,
    0, 0x3bda, 0, 0x3c09, 0, 0x3c38, 0, 0x3c67, 0, 0x3c96, 0, 0x3cc5, 0, 0x3cf4, 0, 188,
    0, 0x3d23, 0, 0x3d52, 0, 0x3d81, 0, 0x3db0, 0, 0x3ddf, 0, 0x3e0e, 0, 0x3e3d, 0, 0x3e6c,
    0, 0x3e9b, 0, 0x3eca, 0, 0x3ef9, 0, 0x3f28, 0, 0x3f57, 0, 0x3f86, 0, 188, 0, 0x3fb5,
    0, 188, 0, 0x3fe4, 0, 0x4013, 0, 0x4042, 0, 0x4071, 0, 0x40a0, 0, 0x40cf, 0, 0x40fe,
    0, 188, 0, 0x412d, 0, 0x415c, 0, 0x418b, 0, 0x41ba, 0, 0x41e9, 0, 0x4218, 0, 0x4247,
    0, 0x4276, 0, 0x42a5, 0, 188, 0, 0x42d4, 0, 0x4303, 0, 188, 0, 0x4332, 0, 0x4361,
    0, 0x4390, 0, 188, 0, 0x43bf, 0, 0x43ee, 0, 0x441d, 0, 0x444c, 0, 188, 0, 0x447b,
    0, 188, 0, 0x44aa, 0, 0x44d9, 0, 0x4508, 0, 0x4537, 0, 0x4566, 0, 0x4595, 0, 0x45c4,
    0, 188, 0, 0x45f3, 0, 0x4622, 0, 188, 0, 0x4651, 0, 0x4680, 0, 0x46af, 0, 0x46de,
    0, 188, 0, 0x470d, 0, 0x473c, 0, 188, 0, 0x476b, 0, 0x479a, 0, 0x47c9, 0, 0x47f8,
    0, 0x4827, 0, 0x4856, 0, 0x4885, 0, 188, 0, 0x48b4, 0, 0x48e3, 0, 0x4912, 0, 0x4941,
    0, 0x4970, 0, 0x499f, 0, 0x49ce, 0, 0x49fd, 0, 0x4a2c, 0, 0x4a5b, 0, 0x4a8a, 0, 0x4ab9,
    0, 0x4ae8, 0, 0x4b17, 0, 0x4b46, 0, 0x4b75, 0, 0x4ba4, 0, 0x4bd3, 0, 0x4c02, 0, 0x4c31,
    0, 0x4c60, 0, 0x4c8f, 0, 0x4cbe, 0, 0x4ced, 0, 0x4d1c, 0, 0x4d4b, 0, 0x4d7a, 0, 0x4da9,
    0, 0x4dd8, 0, 0x4e07, 0, 188, 0, 0x4e36, 0, 0x4e65, 0, 188, 0, 0x4e94, 0, 0x4ec3,
    0, 188, 0, 0x4ef2, 0, 0x4f21, 0, 0x4f50, 0, 0x4f7f, 0, 0x4fae, 0, 0x4fdd, 0, 0x500c,
    0, 0x503b, 0, 0x506a, 0, 0x5099, 0, 0x50c8, 0, 0x50f7, 0, 0x5126, 0, 0x5155, 0, 0x5184,
    0, 0x51b3, 0, 0x51e2, 0, 0x5211, 0, 0x5240, 0, 0x526f, 0, 0x529e, 0, 188, 0, 0x52cd,
    0, 0x52fc, 0, 0x532b, 0, 0x535a, 0, 0x5389, 0, 188, 0, 0x53b8, 0, 0x53e7, 0, 0x5416,
    0, 0x5445, 0, 0x5474, 0, 0x54a3, 0, 188, 0, 0x54d2, 0, 0x5501, 0, 0x5530, 0, 0x555f,
    0, 0x558e, 0, 188, 0, 0x55bd, 0, 0x55ec, 0, 0x561b, 0, 0x564a, 0, 0x5679, 0, 0x56a8,
    0, 0x56d7, 0, 0x5706, 0, 0x5735, 0, 0x5764, 0, 188, 0, 0x5793, 0, 0x57c2, 0, 0x57f1,
    0, 0x5820, 0, 0x584f, 0, 0x587e, 0, 188, 0, 0x58ad, 0, 0x58dc, 0, 0x590b, 0, 188,
    0, 0x593a, 0, 0x5969, 0, 0x5998, 0, 0x59c7, 0, 0x59f6, 0, 0x5a25, 0, 0x5a54, 0, 0x5a83,
    0, 0x5ab2, 0, 0x5ae1, 0, 0x5b10, 0, 0x5b3f, 0, 0x5b6e, 0, 188, 0, 0x5b9d, 0, 0x5bcc,
    0, 0x5bfb, 0, 188, 0, 0x5c2a, 0, 0x5c59, 0, 188, 0, 0x5c88, 0, 188, 0, 0x5cb7,
    0, 0x5ce6, 0, 0x5d15, 0, 0x5d44, 0, 0x5d73, 0, 0x5da2, 0, 0x5dd1, 0, 0x5e00, 0, 0x5e2f,
    0, 0x5e5e, 0, 0x5e8d, 0, 0x5ebc, 0, 0x5eeb, 0, 188, 0, 0x5f1a, 0, 0x5f49, 0, 188,
    0, 0x5f78, 0, 0x5fa7, 0, 0x5fd6, 0, 0x6005, 0, 0x6034, 0, 0x6063, 0, 188, 0, 0x6092,
    0, 188, 0, 0x60c1, 0, 188, 0 };

  private static int [] zzUnpackRowMap() {
    int [] result = new int[611];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(ushort[] packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static readonly int [] ZZ_TRANS;

  private static readonly ushort[] ZZ_TRANS_PACKED_0 = new ushort[] {
    1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9,
    1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17,
    1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 2, 1, 23, 1, 24,
    1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32,
    1, 33, 1, 34, 1, 35, 3, 2, 1, 36, 1, 37, 1, 2, 1, 38,
    2, 2, 1, 39, 1, 40, 1, 5, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 0,
    1, 3, 47, 0, 1, 4, 2, 0, 1, 42, 88, 0, 1, 2, 1, 0,
    1, 43, 1, 0, 1, 2, 1, 44, 13, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 15, 0, 1, 45, 46, 0, 1, 46, 46, 0, 1, 47,
    49, 0, 1, 48, 28, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 49, 6, 2, 1, 0, 6, 2, 1, 50, 9, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    7, 2, 1, 51, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 52, 3, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 7, 2, 1, 53, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 54, 1, 2,
    1, 0, 2, 2, 1, 55, 7, 2, 1, 56, 5, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 57,
    1, 58, 2, 2, 1, 0, 5, 2, 1, 59, 10, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 60,
    3, 2, 1, 0, 6, 2, 1, 61, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 62, 1, 63,
    2, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 64, 2, 2,
    1, 65, 1, 66, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 7, 2, 1, 67, 1, 0, 6, 2, 1, 68,
    9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 4, 2, 1, 69, 1, 70, 1, 2, 1, 71, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    4, 2, 1, 72, 3, 2, 1, 0, 6, 2, 1, 73, 2, 2, 1, 74,
    6, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 3, 2, 1, 75, 12, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 76,
    1, 2, 1, 0, 1, 2, 1, 77, 14, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 78, 3, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 4, 2, 1, 79, 1, 80, 2, 2, 1, 0, 1, 81,
    15, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 14, 2, 1, 82, 1, 2, 2, 0, 1, 41,
    44, 83, 1, 84, 2, 83, 45, 85, 1, 84, 1, 85, 1, 86, 1, 0,
    1, 86, 1, 0, 2, 86, 11, 0, 1, 87, 1, 0, 8, 86, 1, 0,
    16, 86, 5, 0, 1, 42, 44, 0, 1, 2, 1, 0, 1, 43, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 2, 2, 1, 88, 5, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 89, 14, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2,
    1, 90, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 1, 91, 7, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    1, 92, 7, 2, 1, 0, 4, 2, 1, 93, 11, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    2, 2, 1, 94, 13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 95, 14, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    1, 96, 6, 2, 1, 97, 1, 0, 2, 2, 1, 98, 13, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 3, 2,
    1, 99, 4, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 3, 2, 1, 100, 4, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 5, 2, 1, 101, 10, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 2, 1, 102, 14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 4, 2, 1, 103, 3, 2,
    1, 104, 7, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 6, 2, 1, 105, 1, 2, 1, 0, 1, 2, 1, 106,
    14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 5, 2, 1, 107, 1, 2, 1, 108, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 3, 2,
    1, 109, 4, 2, 1, 0, 10, 2, 1, 110, 5, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 111, 15, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 5, 2, 1, 112, 2, 2, 1, 0, 5, 2, 1, 113,
    10, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 15, 2, 1, 114, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 2,
    1, 115, 14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 7, 2, 1, 116, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 117,
    3, 2, 1, 0, 6, 2, 1, 118, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 119, 2, 2, 1, 120,
    2, 2, 1, 121, 1, 2, 1, 0, 5, 2, 1, 122, 10, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2,
    1, 123, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 124, 6, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 3, 2, 1, 125, 12, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 126, 7, 2,
    1, 0, 4, 2, 1, 127, 11, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 4, 2, 1, 128,
    11, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 4, 2, 1, 129, 3, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 130, 15, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 131, 15, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 132,
    3, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 5, 2, 1, 133, 2, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 86, 1, 0, 1, 86, 1, 0, 2, 86, 13, 0,
    8, 86, 1, 0, 16, 86, 3, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 4, 2, 1, 134, 11, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 1, 135, 1, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 136, 9, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    7, 2, 1, 137, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 138,
    1, 2, 1, 0, 2, 2, 3, 0, 1, 139, 9, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 140, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 3, 2, 1, 141,
    4, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 142, 1, 2,
    1, 0, 2, 2, 3, 0, 1, 143, 9, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 6, 2, 1, 144, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 10, 2,
    1, 145, 5, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 6, 2, 1, 146, 1, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2,
    1, 147, 3, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 148, 2, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 149, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    7, 2, 1, 150, 8, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 151, 13, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    7, 2, 1, 152, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 153, 6, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 154, 1, 2, 1, 0, 2, 2,
    3, 0, 1, 155, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 2, 1, 156, 14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 11, 2, 1, 157, 4, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    6, 2, 1, 158, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2,
    1, 159, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 160, 13, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2,
    1, 161, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 162,
    9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 4, 2, 1, 163, 11, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    4, 2, 1, 164, 11, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 165, 9, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    3, 2, 1, 166, 4, 2, 1, 0, 3, 2, 1, 167, 12, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 2, 2, 1, 168, 1, 2, 1, 169, 11, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 170,
    1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 171, 15, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 1, 172, 15, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 173, 9, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 1, 2, 1, 174, 14, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 175, 3, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 5, 2, 1, 176, 2, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 1, 177, 15, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 178, 15, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 1, 2, 1, 179, 14, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 180, 3, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 3, 2, 1, 181, 4, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    6, 2, 1, 182, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 183, 13, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 1, 2, 1, 184, 14, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 185, 6, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 0, 1, 138, 7, 0, 1, 139,
    37, 0, 1, 2, 1, 186, 1, 2, 1, 0, 2, 2, 3, 0, 1, 187,
    9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 188, 2, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 0, 1, 142, 7, 0, 1, 143, 37, 0,
    1, 2, 1, 189, 1, 2, 1, 0, 2, 2, 3, 0, 1, 190, 9, 0,
    8, 2, 1, 0, 1, 2, 1, 191, 14, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2,
    1, 192, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 1, 193, 7, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 194, 15, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 195, 15, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 196,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 197, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 198, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 199, 1, 2, 1, 0, 2, 2, 3, 0, 1, 200,
    9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 201,
    13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 6, 2, 1, 202, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 0, 1, 154, 7, 0, 1, 155, 37, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 203, 13, 2,
    2, 0, 1, 41, 1, 2, 1, 204, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 205, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 206, 14, 2,
    2, 0, 1, 41, 1, 2, 1, 207, 1, 2, 1, 0, 2, 2, 3, 0,
    1, 208, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 209, 1, 2, 1, 0, 2, 2, 3, 0, 1, 210, 9, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 211, 13, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2,
    1, 212, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 213,
    9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 214, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 215, 1, 2, 13, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 216, 9, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 5, 2,
    1, 217, 2, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 218, 2, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 5, 2, 1, 219, 2, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    2, 2, 1, 220, 13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 1, 2, 1, 221, 6, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    1, 222, 7, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 223, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 1, 224, 1, 2,
    13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 1, 225, 7, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 3, 2, 1, 226, 12, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2,
    1, 227, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 4, 2, 1, 228, 3, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 6, 2, 1, 229, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 230, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 6, 2, 1, 231, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 232, 1, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 4, 2, 1, 233, 3, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 2, 2, 1, 234, 13, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 10, 2, 1, 235,
    5, 2, 2, 0, 1, 41, 1, 0, 1, 186, 7, 0, 1, 187, 38, 0,
    1, 187, 8, 0, 1, 236, 36, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 237, 15, 2, 2, 0, 1, 41,
    1, 0, 1, 189, 7, 0, 1, 190, 37, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 3, 2, 1, 238, 12, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    7, 2, 1, 239, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 240,
    1, 2, 1, 0, 1, 241, 1, 2, 3, 0, 1, 242, 9, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 2, 2, 1, 243, 5, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 1, 244, 1, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 245, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 0, 1, 197, 7, 0, 1, 198, 38, 0, 1, 199, 7, 0,
    1, 200, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 1, 2, 1, 246, 14, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2,
    1, 247, 8, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 7, 2, 1, 248, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 0, 1, 204, 44, 0, 1, 249, 1, 86, 1, 0, 1, 86, 1, 0,
    2, 86, 11, 0, 1, 87, 1, 0, 8, 86, 1, 0, 16, 86, 2, 0,
    1, 250, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 1, 251, 15, 2, 2, 0, 1, 41, 1, 0, 1, 207, 7, 0,
    1, 208, 38, 0, 1, 209, 7, 0, 1, 210, 38, 0, 1, 210, 8, 0,
    1, 252, 36, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    1, 2, 1, 253, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2,
    1, 254, 13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 255, 14, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 0x0100,
    7, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 3, 2, 1, 0x0101, 12, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    6, 2, 1, 0x0102, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x0103, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x0104, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    2, 2, 1, 0x0105, 13, 2, 2, 0, 1, 41, 1, 2, 1, 0x0106, 1, 2,
    1, 0, 2, 2, 3, 0, 1, 0x0107, 9, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    6, 2, 1, 0x0108, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0x0109, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 0x010a, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x010b, 1, 2,
    13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 8, 2, 1, 0x010c,
    7, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 0x010d, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    6, 2, 1, 0x010e, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 5, 2, 1, 0x010f, 2, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 8, 2, 1, 0x0110, 7, 2, 2, 0, 1, 41, 1, 2,
    1, 0x0111, 1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0112, 9, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0113, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 0x0114, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0x0115, 1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0116,
    9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 1, 0x0117, 7, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x0118, 1, 2,
    13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x0119, 3, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 5, 2, 1, 0x011a, 10, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 0x011b,
    6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 5, 2, 1, 0x011c, 2, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0x011d, 1, 2, 1, 0, 2, 2, 3, 0,
    1, 0x011e, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 0,
    1, 240, 7, 0, 1, 242, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 9, 2, 1, 0x011f, 6, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 6, 2, 1, 0x0120, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x0121, 1, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 4, 2, 1, 0x0122, 11, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 0x0123, 1, 2, 13, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0124, 1, 2, 1, 0,
    1, 0x0125, 1, 2, 3, 0, 1, 0x0126, 9, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    1, 2, 1, 0x0127, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 46, 0,
    1, 250, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 5, 2,
    1, 0x0128, 2, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x0129, 3, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0x012a, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 0x012b, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 0x012c,
    14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x012d, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x012e,
    3, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x012f, 13, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 6, 2, 1, 0x0130, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x0131, 1, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0132, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 0x0133, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 0, 1, 0x0106, 7, 0, 1, 0x0107, 37, 0, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2, 1, 0x0134,
    8, 2, 2, 0, 1, 41, 1, 0, 1, 0x0109, 44, 0, 1, 0x0135, 1, 86,
    1, 0, 1, 86, 1, 0, 2, 86, 11, 0, 1, 87, 1, 0, 8, 86,
    1, 0, 16, 86, 2, 0, 1, 0x0136, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 4, 2, 1, 0x0137, 11, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2,
    1, 0x0138, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 0x0139, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x013a, 1, 2,
    13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x013b, 1, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x013c, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 0, 1, 0x0111, 7, 0, 1, 0x0112, 38, 0, 1, 0x0113, 7, 0, 1, 0x0114,
    38, 0, 1, 0x0115, 7, 0, 1, 0x0116, 37, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 5, 2, 1, 0x013d, 2, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 5, 2, 1, 0x013e, 10, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x013f, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 2, 2, 1, 0x0140, 13, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    12, 2, 1, 0x0141, 3, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 4, 2, 1, 0x0142, 11, 2,
    2, 0, 1, 41, 1, 0, 1, 0x011d, 7, 0, 1, 0x011e, 37, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 0x0143, 2, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 0x0144, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 0x0145,
    2, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 5, 2, 1, 0x0146, 2, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 8, 2, 1, 0x0147, 7, 2, 2, 0, 1, 41, 1, 0,
    1, 0x0124, 7, 0, 1, 0x0126, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 0x0148, 15, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x0149,
    1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x014a, 13, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    6, 2, 1, 0x014b, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 0,
    1, 0x012a, 44, 0, 1, 0x014c, 1, 86, 1, 0, 1, 86, 1, 0, 2, 86,
    11, 0, 1, 87, 1, 0, 8, 86, 1, 0, 16, 86, 2, 0, 1, 0x014d,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 0x014e,
    6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 6, 2, 1, 0x014f, 1, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    1, 2, 1, 0x0150, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0x0151, 1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0152, 9, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0153, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 0x0154, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 1, 2, 1, 0x0155, 14, 2, 2, 0, 1, 41, 1, 0, 1, 0x0132,
    7, 0, 1, 0x0133, 37, 0, 1, 2, 1, 0x0156, 1, 2, 1, 0, 2, 2,
    3, 0, 1, 0x0157, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    46, 0, 1, 0x0136, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    5, 2, 1, 0x0158, 2, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2,
    1, 0x0159, 13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 11, 2, 1, 0x015a, 4, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 9, 2, 1, 0x015b, 6, 2, 2, 0, 1, 41, 1, 2, 1, 0x015c,
    1, 2, 1, 0, 2, 2, 3, 0, 1, 0x015d, 9, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 6, 2, 1, 0x015e, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x015f,
    1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 7, 2, 1, 0x0160, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0x0161, 1, 2, 1, 0, 1, 0x0162, 1, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 0x0163, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 0x0164, 9, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 6, 2, 1, 0x0165, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2,
    1, 0x0166, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 0x0167, 15, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    13, 2, 1, 0x0168, 2, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 3, 2, 1, 0x0169, 4, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 1, 2, 1, 0x016a, 14, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 0x016b, 6, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 0x016c, 9, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 7, 2, 1, 0x016d, 8, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 0x016e,
    9, 2, 2, 0, 1, 41, 1, 2, 1, 0x016f, 1, 2, 1, 0, 2, 2,
    3, 0, 1, 0x0170, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    46, 0, 1, 0x014d, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    6, 2, 1, 0x0171, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2,
    1, 0x0172, 8, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 6, 2, 1, 0x0173, 1, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 0, 1, 0x0151, 7, 0, 1, 0x0152, 38, 0, 1, 0x0152, 8, 0,
    1, 0x0174, 37, 0, 1, 0x0153, 7, 0, 1, 0x0154, 37, 0, 1, 2, 1, 0x0175,
    1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0176, 9, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 0, 1, 0x0156, 7, 0, 1, 0x0157, 37, 0,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 2, 1, 0x0177, 14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 9, 2, 1, 0x0178, 6, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    4, 2, 1, 0x0179, 3, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2,
    1, 0x017a, 13, 2, 2, 0, 1, 41, 1, 0, 1, 0x015c, 7, 0, 1, 0x015d,
    37, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 7, 2, 1, 0x017b, 8, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x017c,
    13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x017d, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 0, 1, 0x0161, 44, 0, 1, 0x017e, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 4, 2, 1, 0x017f, 3, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 86, 1, 0, 1, 86, 1, 0, 2, 86, 11, 0, 1, 87,
    1, 0, 8, 86, 1, 0, 16, 86, 2, 0, 1, 0x0180, 1, 2, 1, 0x0181,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 0x0182, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x0183, 1, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0184, 1, 2,
    1, 0, 1, 0x0185, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 0x0186, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 11, 2, 1, 0x0187, 4, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 14, 2, 1, 0x0188,
    1, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 0x0189, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    6, 2, 1, 0x018a, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x018b, 13, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    6, 2, 1, 0x018c, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0x018d, 1, 2, 1, 0, 1, 0x018e, 1, 2, 3, 0, 1, 0x018f, 9, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0190, 1, 2,
    1, 0, 2, 2, 3, 0, 1, 0x0191, 9, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 0, 1, 0x016f, 7, 0, 1, 0x0170, 37, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2,
    1, 0x0192, 8, 2, 2, 0, 1, 41, 1, 2, 1, 0x0193, 1, 2, 1, 0,
    1, 0x0194, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 0x0195,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    2, 2, 1, 0x0196, 13, 2, 2, 0, 1, 41, 1, 0, 1, 0x0175, 7, 0,
    1, 0x0176, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 6, 2, 1, 0x0197, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0x0198, 1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0199, 9, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 7, 2, 1, 0x019a, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 3, 2, 1, 0x019b,
    4, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x019c, 1, 2,
    1, 0, 1, 0x019d, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 0x019e, 1, 2, 1, 0x019f, 1, 2, 1, 0, 1, 0x01a0, 1, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 0x01a1, 1, 2, 1, 0x01a2, 1, 2,
    1, 0, 2, 2, 3, 0, 1, 0x01a3, 9, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 46, 0, 1, 0x0180, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 7, 2, 1, 0x01a4, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 0, 1, 0x0181, 44, 0, 1, 0x01a5, 1, 86, 1, 0, 1, 86, 1, 0,
    2, 86, 11, 0, 1, 87, 1, 0, 8, 86, 1, 0, 16, 86, 2, 0,
    1, 0x01a6, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 1, 2, 1, 0x01a7, 14, 2, 2, 0, 1, 41, 1, 0, 1, 0x0184,
    44, 0, 1, 0x01a8, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 5, 2, 1, 0x01a9, 10, 2, 2, 0, 1, 41, 1, 86,
    1, 0, 1, 86, 1, 0, 2, 86, 11, 0, 1, 87, 1, 0, 8, 86,
    1, 0, 16, 86, 2, 0, 1, 0x01aa, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 0x01ab, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 0x01ac,
    2, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x01ad, 1, 2,
    1, 0, 1, 0x01ae, 1, 2, 3, 0, 1, 0x01af, 9, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0x01b0, 1, 2, 1, 0, 2, 2,
    3, 0, 1, 0x01b1, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    9, 2, 1, 0x01b2, 6, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2, 1, 0x01b3, 8, 2,
    2, 0, 1, 41, 1, 0, 1, 0x018d, 7, 0, 1, 0x018f, 37, 0, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 0x01b4, 2, 2,
    1, 0, 10, 2, 1, 0x01b5, 5, 2, 2, 0, 1, 41, 1, 0, 1, 0x0190,
    7, 0, 1, 0x0191, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x01b6,
    1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 0,
    1, 0x0193, 44, 0, 1, 0x01b7, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 1, 2, 1, 0x01b8, 14, 2, 2, 0, 1, 41,
    1, 86, 1, 0, 1, 86, 1, 0, 2, 86, 11, 0, 1, 87, 1, 0,
    8, 86, 1, 0, 16, 86, 2, 0, 1, 0x01b9, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 0x01ba, 14, 2,
    2, 0, 1, 41, 1, 2, 1, 0x01bb, 1, 2, 1, 0, 2, 2, 3, 0,
    1, 0x01bc, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 0,
    1, 0x0198, 7, 0, 1, 0x0199, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 0x01bd, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 0x01be, 15, 2, 2, 0, 1, 41, 1, 0, 1, 0x019c, 44, 0, 1, 0x01bf,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 2, 1, 0x01c0, 14, 2, 2, 0, 1, 41, 1, 86, 1, 0, 1, 86,
    1, 0, 2, 86, 11, 0, 1, 87, 1, 0, 8, 86, 1, 0, 16, 86,
    2, 0, 1, 0x01c1, 1, 0, 1, 0x019f, 44, 0, 1, 0x01c2, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x01c3, 3, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 86, 1, 0, 1, 86, 1, 0, 2, 86,
    11, 0, 1, 87, 1, 0, 8, 86, 1, 0, 16, 86, 2, 0, 1, 0x01c4,
    1, 0, 1, 0x01a2, 7, 0, 1, 0x01a3, 37, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 0x01c5, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 46, 0, 1, 0x01a6, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 3, 2, 1, 0x01c6, 12, 2, 2, 0, 1, 41,
    46, 0, 1, 0x01aa, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    7, 2, 1, 0x01c7, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x01c8,
    13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 3, 2, 1, 0x01c9, 4, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 0, 1, 0x01ad, 7, 0, 1, 0x01af, 37, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 11, 2, 1, 0x01ca, 4, 2,
    2, 0, 1, 41, 1, 0, 1, 0x01b0, 7, 0, 1, 0x01b1, 37, 0, 1, 2,
    1, 0x01cb, 1, 2, 1, 0, 2, 2, 3, 0, 1, 0x01cc, 9, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x01cd, 13, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 11, 2, 1, 0x01ce, 4, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 0x01cf,
    9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x01d0, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    46, 0, 1, 0x01b9, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    1, 2, 1, 0x01d1, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 1, 0x01d2, 1, 2, 13, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 0, 1, 0x01bb, 7, 0, 1, 0x01bc, 37, 0,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    5, 2, 1, 0x01d3, 10, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 1, 0x01d4, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 46, 0, 1, 0x01c1, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x01d5, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    46, 0, 1, 0x01c4, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    7, 2, 1, 0x01d6, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 0x01d7,
    14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 5, 2, 1, 0x01d8, 2, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 0x01d9,
    6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 4, 2, 1, 0x01da, 3, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 6, 2, 1, 0x01db, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x01dc, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 0, 1, 0x01cb, 7, 0, 1, 0x01cc, 37, 0,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    9, 2, 1, 0x01dd, 6, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x01de, 13, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 11, 2, 1, 0x01df, 4, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x01e0, 1, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 10, 2, 1, 0x01e1, 5, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 2, 2, 1, 0x01e2, 13, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x01e3, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 5, 2, 1, 0x01e4, 10, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 10, 2,
    1, 0x01e5, 5, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    1, 0x01e6, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    6, 2, 1, 0x01e7, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 4, 2, 1, 0x01e8, 11, 2,
    2, 0, 1, 41, 1, 2, 1, 0x01e9, 1, 2, 1, 0, 1, 0x01ea, 1, 2,
    3, 0, 1, 0x01eb, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 0x01ec, 1, 2, 13, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x01ed, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 0x01ee, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2,
    1, 0x01ef, 3, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x01f0,
    1, 2, 1, 0, 2, 2, 3, 0, 1, 0x01f1, 9, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 0x01f2, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x01f3,
    3, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 2, 1, 0x01f4, 14, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 1, 0x01f5, 15, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x01f6, 3, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x01f7, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x01f8,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 0x01f9, 15, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 2, 1, 0x01fa, 14, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 1, 0x01fb, 15, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 6, 2, 1, 0x01fc, 9, 2, 2, 0, 1, 41, 1, 0, 1, 0x01e9,
    7, 0, 1, 0x01eb, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 11, 2, 1, 0x01fd, 4, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x01fe,
    3, 2, 1, 0, 6, 2, 1, 0x01ff, 9, 2, 2, 0, 1, 41, 1, 0,
    1, 0x01ed, 7, 0, 1, 0x01ee, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 3, 2, 1, 0x0200, 4, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 0, 1, 0x01f0, 7, 0, 1, 0x01f1, 37, 0, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x0201, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    7, 2, 1, 0x0202, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 2, 2, 1, 0x0203,
    13, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x0204, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 0x0205, 1, 2, 13, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0206, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 0x0207, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2,
    1, 0x0208, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 0x0209, 6, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 0x020a, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    11, 2, 1, 0x020b, 4, 2, 2, 0, 1, 41, 1, 2, 1, 0x020c, 1, 2,
    1, 0, 2, 2, 3, 0, 1, 0x020d, 9, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    4, 2, 1, 0x020e, 2, 2, 1, 0x020f, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 0x0210, 7, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 2, 2, 1, 0x0211, 5, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0x0212, 1, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0213, 1, 2,
    1, 0, 2, 2, 3, 0, 1, 0x0214, 9, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 6, 2, 1, 0x0215, 9, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x0216, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 6, 2, 1, 0x0217, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    1, 2, 1, 0x0218, 14, 2, 2, 0, 1, 41, 1, 0, 1, 0x0206, 7, 0,
    1, 0x0207, 37, 0, 1, 2, 1, 0x0219, 1, 2, 1, 0, 2, 2, 3, 0,
    1, 0x021a, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x021b, 1, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 1, 0x021c, 15, 2, 2, 0, 1, 41,
    1, 2, 1, 0x021d, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 0x021e, 1, 0, 1, 0x020c, 7, 0, 1, 0x020d, 37, 0,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x021f,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 4, 2, 1, 0x0220, 3, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 0x0221,
    7, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 6, 2, 1, 0x0222, 9, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 13, 2, 1, 0x0223, 2, 2, 2, 0, 1, 41, 1, 0,
    1, 0x0213, 7, 0, 1, 0x0214, 37, 0, 1, 2, 1, 0x0224, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 0x0225, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 5, 2, 1, 0x0226, 10, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2, 1, 0x0227,
    8, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 2, 2, 1, 0x0228, 13, 2, 2, 0, 1, 41,
    1, 0, 1, 0x0219, 7, 0, 1, 0x021a, 37, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2, 1, 0x0229, 8, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 11, 2, 1, 0x022a, 4, 2, 2, 0, 1, 41, 1, 0,
    1, 0x021d, 44, 0, 1, 0x022b, 1, 86, 1, 0, 1, 86, 1, 0, 2, 86,
    11, 0, 1, 87, 1, 0, 8, 86, 1, 0, 16, 86, 2, 0, 1, 0x022c,
    1, 2, 1, 0, 1, 2, 1, 0, 1, 0x022d, 1, 2, 13, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 3, 2, 1, 0x022e, 4, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0x022f, 1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0230,
    9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x0231, 1, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 14, 2, 1, 0x0232, 1, 2, 2, 0, 1, 41,
    1, 0, 1, 0x0224, 7, 0, 1, 0x0225, 37, 0, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 4, 2, 1, 0x0233, 11, 2,
    2, 0, 1, 41, 1, 2, 1, 0x0234, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 16, 2, 2, 0, 1, 0x0235, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 7, 2, 1, 0x0236, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0x0237, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 0x0238, 1, 2, 1, 0x0239, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 0x023a, 46, 0,
    1, 0x022c, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 3, 2, 1, 0x023b, 12, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 1, 0x023c, 1, 2, 13, 0, 8, 2, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 0, 1, 0x022f, 7, 0, 1, 0x0230, 37, 0, 1, 2,
    1, 0x023d, 1, 2, 1, 0, 2, 2, 3, 0, 1, 0x023e, 9, 0, 8, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 5, 2, 1, 0x023f, 2, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 2, 2, 1, 0x0240, 13, 2, 2, 0, 1, 41, 1, 0, 1, 0x0234,
    44, 0, 1, 0x0241, 1, 86, 1, 0, 1, 86, 1, 0, 2, 86, 11, 0,
    1, 87, 1, 0, 8, 86, 1, 0, 16, 86, 2, 0, 1, 0x0242, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2, 1, 0x0243, 6, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 0, 1, 0x0237, 44, 0, 1, 0x0244,
    1, 86, 1, 0, 1, 86, 1, 0, 2, 86, 11, 0, 1, 87, 1, 0,
    8, 86, 1, 0, 16, 86, 2, 0, 1, 0x0245, 1, 0, 1, 0x0239, 44, 0,
    1, 0x0246, 1, 86, 1, 0, 1, 86, 1, 0, 2, 86, 11, 0, 1, 87,
    1, 0, 8, 86, 1, 0, 16, 86, 2, 0, 1, 0x0247, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 7, 2, 1, 0x0248, 1, 0, 16, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 13, 2, 1, 0x0249, 2, 2, 2, 0, 1, 41, 1, 0,
    1, 0x023d, 7, 0, 1, 0x023e, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 3, 2, 1, 0x024a, 4, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 1, 2,
    1, 0x024b, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41, 46, 0, 1, 0x0242,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2, 1, 0x024c,
    1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 46, 0, 1, 0x0245, 46, 0,
    1, 0x0247, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2,
    1, 0, 6, 2, 1, 0x024d, 9, 2, 2, 0, 1, 41, 1, 2, 1, 0,
    1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 14, 2, 1, 0x024e,
    1, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 8, 2, 1, 0, 6, 2, 1, 0x024f, 9, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 4, 2, 1, 0x0250,
    3, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2,
    1, 0, 2, 2, 13, 0, 8, 2, 1, 0, 7, 2, 1, 0x0251, 8, 2,
    2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0,
    8, 2, 1, 0, 11, 2, 1, 0x0252, 4, 2, 2, 0, 1, 41, 1, 2,
    1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 5, 2, 1, 0x0253, 2, 2,
    1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0254, 1, 2, 1, 0,
    2, 2, 3, 0, 1, 0x0255, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0,
    1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 6, 2,
    1, 0x0256, 1, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0257,
    1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0258, 9, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0, 1, 2, 1, 0, 2, 2,
    13, 0, 1, 2, 1, 0x0259, 6, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 3, 2, 1, 0x025a,
    4, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 0, 1, 0x0254, 7, 0,
    1, 0x0255, 37, 0, 1, 2, 1, 0x025b, 1, 2, 1, 0, 2, 2, 3, 0,
    1, 0x025c, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41, 1, 0,
    1, 0x0257, 7, 0, 1, 0x0258, 37, 0, 1, 2, 1, 0, 1, 2, 1, 0,
    2, 2, 13, 0, 8, 2, 1, 0, 15, 2, 1, 0x025d, 2, 0, 1, 41,
    1, 2, 1, 0, 1, 2, 1, 0, 2, 2, 13, 0, 8, 2, 1, 0,
    6, 2, 1, 0x025e, 9, 2, 2, 0, 1, 41, 1, 0, 1, 0x025b, 7, 0,
    1, 0x025c, 38, 0, 1, 0x025c, 8, 0, 1, 0x025f, 36, 0, 1, 2, 1, 0x0260,
    1, 2, 1, 0, 2, 2, 3, 0, 1, 0x0261, 9, 0, 8, 2, 1, 0,
    16, 2, 2, 0, 1, 41, 1, 2, 1, 0x0262, 1, 2, 1, 0, 2, 2,
    3, 0, 1, 0x0263, 9, 0, 8, 2, 1, 0, 16, 2, 2, 0, 1, 41,
    1, 0, 1, 0x0260, 7, 0, 1, 0x0261, 38, 0, 1, 0x0262, 7, 0, 1, 0x0263,
    37, 0, 0 };

  private static int [] zzUnpackTrans() {
    int [] result = new int[24816];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private const int ZZ_UNKNOWN_ERROR = 0;
  private const int ZZ_NO_MATCH = 1;
  private const int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static readonly String[] ZZ_ERROR_MSG = new string[] {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static readonly int [] ZZ_ATTRIBUTE;

  private static readonly ushort[] ZZ_ATTRIBUTE_PACKED_0 = new ushort[] {
    1, 0, 3, 1, 2, 9, 1, 1, 7, 9, 2, 1, 1, 9, 1, 1,
    1, 9, 8, 1, 1, 9, 12, 1, 1, 0, 3, 1, 4, 9, 34, 1,
    1, 0, 1, 9, 1, 0, 1, 1, 1, 9, 50, 1, 1, 0, 1, 9,
    2, 1, 1, 0, 1, 9, 10, 1, 1, 0, 1, 9, 30, 1, 2, 0,
    1, 1, 1, 0, 1, 9, 6, 1, 1, 0, 1, 9, 1, 0, 1, 9,
    3, 1, 2, 0, 1, 1, 1, 0, 1, 9, 2, 0, 25, 1, 1, 9,
    3, 1, 1, 0, 1, 1, 1, 9, 6, 1, 1, 0, 1, 9, 1, 1,
    1, 9, 9, 1, 1, 0, 1, 9, 1, 1, 2, 0, 6, 1, 1, 0,
    1, 9, 1, 0, 1, 9, 1, 0, 1, 9, 6, 1, 1, 0, 1, 9,
    5, 1, 1, 0, 1, 1, 1, 9, 3, 1, 2, 0, 6, 1, 1, 0,
    1, 9, 1, 1, 1, 0, 1, 9, 21, 1, 1, 0, 1, 9, 3, 1,
    3, 0, 1, 9, 1, 1, 1, 0, 1, 9, 4, 1, 1, 0, 1, 9,
    3, 1, 1, 0, 1, 1, 1, 0, 11, 1, 1, 0, 1, 9, 3, 1,
    1, 9, 1, 0, 1, 9, 7, 1, 1, 0, 1, 1, 1, 9, 2, 0,
    1, 1, 1, 0, 1, 1, 1, 0, 6, 1, 1, 0, 1, 1, 1, 9,
    1, 0, 1, 9, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1, 0,
    1, 9, 2, 1, 1, 0, 1, 1, 2, 0, 1, 1, 2, 0, 1, 9,
    1, 1, 1, 0, 1, 9, 1, 1, 1, 0, 1, 1, 1, 9, 2, 1,
    1, 0, 1, 1, 1, 9, 1, 0, 1, 9, 5, 1, 1, 0, 1, 1,
    1, 9, 1, 1, 1, 0, 1, 9, 2, 1, 1, 0, 1, 1, 1, 9,
    1, 0, 1, 1, 1, 9, 6, 1, 1, 0, 1, 9, 28, 1, 1, 0,
    1, 1, 1, 9, 1, 1, 1, 0, 1, 9, 1, 1, 1, 0, 1, 9,
    20, 1, 1, 0, 1, 9, 4, 1, 1, 0, 1, 9, 5, 1, 1, 0,
    1, 9, 4, 1, 1, 0, 1, 9, 2, 1, 2, 0, 5, 1, 1, 0,
    1, 9, 5, 1, 1, 0, 1, 9, 2, 1, 1, 0, 1, 9, 3, 1,
    2, 0, 1, 1, 4, 0, 2, 1, 1, 0, 1, 9, 2, 1, 1, 0,
    1, 9, 1, 1, 1, 0, 1, 9, 1, 0, 1, 9, 12, 1, 1, 0,
    1, 9, 1, 1, 1, 0, 1, 9, 2, 1, 2, 0, 2, 1, 1, 9,
    1, 0, 1, 9, 1, 0, 1, 9, 0 };

  private static int [] zzUnpackAttribute() {
    int [] result = new int[611];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(ushort[] packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.Length;
    while (i + 1 < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private System.IO.TextReader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private bool zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private bool zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private bool zzEOFDone;

  /* user code: */

  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }

  int isName; 
  NameType name;
  FuncName fname; 
  Ntest ntest;
  AxisType at;
  int len;
  String literal;
  Double number; 
  int colonPosition;




  /**
   * Creates a new scanner
   * There is also a System.IO.Stream version of this constructor.
   *
   * @param   in  the System.IO.TextReader to read input from.
   */
  internal Yylex(TextReader @in) {
  	isName = 1;
	colonPosition = -1;
    this.zzReader = @in;
  }

  /**
   * Creates a new scanner.
   * There is also TextReader version of this constructor.
   *
   * @param   in  the System.IO.Stream to read input from.
   */
  internal Yylex(Stream @in) : this(new StreamReader(@in))
  {
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(ushort[] packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed[i++];
      char value = (char)packed[i++];
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private bool zzRefill() {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      Array.Copy(zzBuffer, zzStartRead,
                 zzBuffer, 0,
                 zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.Length) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzCurrentPos*2];
      Array.Copy(zzBuffer, 0, newBuffer, 0, zzBuffer.Length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.Read(zzBuffer, zzEndRead,
                                            zzBuffer.Length-zzEndRead);

    if (numRead <= 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public void yyclose() {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.Close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public void yyreset(System.IO.TextReader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex/CSFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (IndexOutOfRangeException) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Exception(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   System.IO.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() {
    int zzInput = 0;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


        while (true) {
          goto zzForAction_skip;
        zzForAction: break;
        zzForAction_skip:
          if (!ZZ_SPURIOUS_WARNINGS_SUCK) goto zzForAction;
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            goto zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            bool eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
            goto zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) goto zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) goto zzForAction;
          }

        }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 178 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                      	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.LOCAL_NAME;
				fname = new FuncName();
				fname.i = FuncName.LOCAL_NAME;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 28: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 111 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
          if (isName == 0 ) {
		  isName = 1 ;
		 return sym(DIV);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "div";
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 5: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 71 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
    isName = 1 ; return sym(SUB);
#line default
          }
          break;
        case 73: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 257 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                         	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STRING_LENGTH;
				fname = new FuncName();
				fname.i = FuncName.STRING_LENGTH;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 56: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 225 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONTAINS;
				fname = new FuncName();
				fname.i = FuncName.CONTAINS;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 46: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 450 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                   	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NUMBER;
				fname = new FuncName();
				fname.i = FuncName.NUMBER;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 26: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 491 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
           
				isName = 0;
				len = yytext().Length;
				literal = yytext().Substring(1, len-2);
				return sym(LITERAL,literal);
			
#line default
          }
          break;
        case 52: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 474 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CEILING;
				fname = new FuncName();
				fname.i = FuncName.CEILING;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 4: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 669 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
    	
			throw new XPathParseException("Invalid char in XPath Expression");
		
#line default
          }
          break;
        case 62: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 551 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.ATTRIBUTE;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 74: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 401 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                          	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ENCODE_FOR_URI;
				fname = new FuncName();
				fname.i = FuncName.ENCODE_FOR_URI;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 88: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 369 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NAMESPACE_URI_FOR_PREFIX;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI_FOR_PREFIX;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 61: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 385 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                      	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.IRI_TO_URI;
				fname = new FuncName();
				fname.i = FuncName.IRI_TO_URI;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 22: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 84 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
      isName = 1 ; return sym(LE);
#line default
          }
          break;
        case 63: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 587 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName =0;
				at = new AxisType();
				at.i = AxisType.NAMESPACE;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 57: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 538 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 81: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 289 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                              	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND_HALF_TO_EVEN;
				fname = new FuncName();
				fname.i = FuncName.ROUND_HALF_TO_EVEN;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 33: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 458 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUM;
				fname = new FuncName();
				fname.i = FuncName.SUM;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 49: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 557 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
               	isName = 1;
				at = new AxisType();
				at.i = AxisType.CHILD;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 54: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 164 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.POSITION;
				fname = new FuncName();
				fname.i = FuncName.POSITION;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 10: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 77 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; return sym(LP);
#line default
          }
          break;
        case 43: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 434 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FALSE;
				fname = new FuncName();
				fname.i = FuncName.FALSE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 17: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 88 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     if (isName ==0){
		isName = 1;
		//System.out.println("returned a MULT");
		return  sym(MULT);
	}
	 else {
		isName = 0;
		name = new NameType();
		name.qname = "*";
		return sym(NAME,name);
	 }	 
	
#line default
          }
          break;
        case 34: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 192 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAME;
				fname = new FuncName();
				fname.i = FuncName.NAME;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 23: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 86 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
      isName = 1 ; return sym(NE);
#line default
          }
          break;
        case 82: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 605 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                          	isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING_SIBLING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 66: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 599 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 21: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 83 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
      isName = 1 ; return sym(GE);
#line default
          }
          break;
        case 11: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 78 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 0 ; return sym(RP);
#line default
          }
          break;
        case 18: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 101 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; 
	 //System.out.println("SLASH returned ");
	 return sym(SLASH);
	
#line default
          }
          break;
        case 77: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 393 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                           	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ESCAPE_HTML_URI;
				fname = new FuncName();
				fname.i = FuncName.ESCAPE_HTML_URI;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 31: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 281 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
               	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ABS;
				fname = new FuncName();
				fname.i = FuncName.ABS;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 13: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 80 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 0 ; return sym(RB);
#line default
          }
          break;
        case 53: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 410 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.BOOLEAN;
				fname = new FuncName();
				fname.i = FuncName.BOOLEAN;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 14: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 81 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; return sym(GT);
#line default
          }
          break;
        case 79: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 544 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                         	isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR_OR_SELF;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 68: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 575 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 60: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 337 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                     	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ENDS_WITH;
				fname = new FuncName();
				fname.i = FuncName.ENDS_WITH;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 15: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 82 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; return sym(LT);
#line default
          }
          break;
        case 8: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 74 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; return sym(AT);
#line default
          }
          break;
        case 58: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 249 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                     	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 70: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 217 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                       	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STARTS_WITH;
				fname = new FuncName();
				fname.i = FuncName.STARTS_WITH;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 9: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 76 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; return sym(COMMA);
#line default
          }
          break;
        case 38: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 522 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                      
				isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.NODE;
				ntest.arg = null;
				return sym(NTEST,ntest);
			
#line default
          }
          break;
        case 36: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 158 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				fname = new FuncName();
				fname.i = FuncName.LAST;
				return sym(FNAME,fname);				 
			
#line default
          }
          break;
        case 16: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 85 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; return sym(EQ);
#line default
          }
          break;
        case 89: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 361 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                                    	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NAMESPACE_URI_FROM_QNAME;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI_FROM_QNAME;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 85: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 353 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LOCAL_NAME_FROM_QNAME;
				fname = new FuncName();
				fname.i = FuncName.LOCAL_NAME_FROM_QNAME;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 44: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 466 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FLOOR;
				fname = new FuncName();
				fname.i = FuncName.FLOOR;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 24: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 106 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
      isName = 1 ; 
	 //System.out.println("DSLASH returned "); 
	 return sym(DSLASH);
	
#line default
          }
          break;
        case 39: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 482 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND;
				fname = new FuncName();
				fname.i = FuncName.ROUND;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 27: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 618 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 0;
				len = yytext().Length;
				name = new NameType();
                               if (!XMLChar.isNCNameStartChar(yytext()[0]))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<len-2;i++){
					if (!XMLChar.isNCNameChar(yytext()[i]))
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
				}

				name.prefix = yytext().Substring(0,len-2);
				name.localname = "*";
				//System.out.println("NAME "+name+ " returned");
				return sym(NAME,name);
			
#line default
          }
          break;
        case 35: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 442 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LANG;
				fname = new FuncName();
				fname.i = FuncName.LANG;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 87: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 530 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                                        
						isName = 0;
						ntest = new Ntest();
						ntest.i = Ntest.PROCESSING_INSTRUCTION;
						ntest.arg = null;
						return sym(NTEST,ntest);
					
#line default
          }
          break;
        case 83: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 581 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                           	isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING_SIBLING;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 2: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 68 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
        /* eat white space */
#line default
          }
          break;
        case 42: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 171 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                  	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.COUNT;
				fname = new FuncName();
				fname.i = FuncName.COUNT;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 32: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 418 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NOT;
				fname = new FuncName();
				fname.i = FuncName.NOT;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 71: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 185 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                         	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAMESPACE_URI;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 72: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 377 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                         	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.RESOLVE_QNAME;
				fname = new FuncName();
				fname.i = FuncName.RESOLVE_QNAME;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 67: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 321 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                      	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.UPPER_CASE;
				fname = new FuncName();
				fname.i = FuncName.UPPER_CASE;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 48: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 209 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                   	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONCAT;
				fname = new FuncName();
				fname.i = FuncName.CONCAT;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 25: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 145 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
         if (isName == 0) {	
		 isName = 1 ;
		 return sym(OR);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "or";
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 75: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 265 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                           	isName =1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NORMALIZE_SPACE;
				fname = new FuncName();
				fname.i = FuncName.NORMALIZE_SPACE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 29: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 122 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
          if (isName == 0) {
		  isName = 1 ;
		 return sym(MOD);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "mod";
		 //System.out.println("returned a NAME "+yytext());
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 51: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 313 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                   	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.COMPARE;
				fname = new FuncName();
				fname.i = FuncName.COMPARE;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 1: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 636 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
             	
				
				isName = 0;
				name = new NameType();
				//name.qname = new String(yytext());
				//System.out.println("returned a NAME ==>" + yytext());
				//if (yytext().charAt(0) =='-'){
				//    throw new XPathParseException("Invalid char in name token:"+yytext());
				//}
				
				name.qname = String.Copy(yytext());
				if (!XMLChar.isNCNameStartChar(name.qname[0]))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<name.qname.Length;i++){
					if (!XMLChar.isNCNameChar(name.qname[i]) 
						&& name.qname[i]!=':' )
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
					if (name.qname[i]==':'){
						colonPosition = i;
					}
				}
		
				if (colonPosition != -1){
					name.prefix = yytext().Substring(0,colonPosition);
					name.localname = yytext().Substring(colonPosition+1);				
				}
				
				colonPosition = -1;
				return sym(NAME,name);
			
#line default
          }
          break;
        case 20: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 73 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
       isName = 0 ; return sym(DDOT);
#line default
          }
          break;
        case 59: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 273 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                     	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRANSLATE;
				fname = new FuncName();
				fname.i = FuncName.TRANSLATE;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 69: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 563 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                   	isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 37: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 426 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRUE;
				fname = new FuncName();
				fname.i = FuncName.TRUE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 30: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 134 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
          if (isName == 0) {
		isName = 1 ;
		 return sym(AND);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "add";
		 return sym(NAME,name);
	      }
	
#line default
          }
          break;
        case 7: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 70 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
      isName = 1 ; return sym(ADD);
#line default
          }
          break;
        case 80: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 297 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                             	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND_HALF_TO_ODD;
				fname = new FuncName();
				fname.i = FuncName.ROUND_HALF_TO_ODD;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 76: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 241 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                           	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_AFTER;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_AFTER;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 40: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 611 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
              	isName = 1;
				at = new AxisType();
				at.i = AxisType.SELF;
				//System.out.println("SELF:: returned");
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 6: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 72 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 0 ; /*System.out.println(". returned ");*/ return sym(DOT);
#line default
          }
          break;
        case 50: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 593 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                	isName = 1;
				at = new AxisType();
				at.i = AxisType.PARENT;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 86: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 305 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CODE_POINTS_TO_STRING;
				fname = new FuncName();
				fname.i = FuncName.CODE_POINTS_TO_STRING;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 65: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 329 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                      	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LOWER_CASE;
				fname = new FuncName();
				fname.i = FuncName.LOWER_CASE;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 45: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 345 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                 	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.QNAME;
				fname = new FuncName();
				fname.i = FuncName.QNAME;
				return sym(FNAME,fname);
			
#line default
          }
          break;
        case 55: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 514 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                         
				isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.COMMENT;
				ntest.arg =  null;
				return sym(NTEST,ntest);
			
#line default
          }
          break;
        case 19: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 156 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; return sym(UNION) ; 
#line default
          }
          break;
        case 78: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 233 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                             	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_BEFORE;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_BEFORE;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 41: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 506 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                      	
				isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.TEXT;
				ntest.arg = null;
				return sym(NTEST,ntest);
			
#line default
          }
          break;
        case 3: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 499 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
              
				isName = 0;
				number = double.Parse(yytext());
				//System.out.println("number returned ==> "+ Double.parseDouble(yytext()));
				return sym(NUMBER,number);
			
#line default
          }
          break;
        case 84: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 569 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                           	isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT_OR_SELF;
				return sym(AXISNAME,at);
			
#line default
          }
          break;
        case 47: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 200 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
                   	isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.STRING;
				fname = new FuncName();
				fname.i = FuncName.STRING;
				return sym(FNAME,fname);	
			
#line default
          }
          break;
        case 12: 
          if (ZZ_SPURIOUS_WARNINGS_SUCK)
          {
#line 79 "D:\\new_cvs\\ximple-dev_csharp2\\ximple-dev_csharp2\\com\\ximpleware\\xpath\\scanner_cs.flex"
     isName = 1 ; /*System.out.println( "[ returned");*/ return sym(LB);
#line default
          }
          break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              if (ZZ_SPURIOUS_WARNINGS_SUCK)
              { return new Symbol(TUVienna.CS_CUP.sym.EOF); }
              break;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
          break;
      }
    }
  }


}
#line 673 "D:\new_cvs\ximple-dev_csharp2\ximple-dev_csharp2\com\ximpleware\xpath\scanner_cs.flex"
}

#line default
