/* The following code was generated by JFlex 1.4.1 on 07-7-26 下午4:35 */

/* 
 * Copyright (C) 2002-2007 XimpleWare, info@ximpleware.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


package com.ximpleware.xpath;
import java_cup.runtime.Symbol;

import com.ximpleware.parser.XMLChar;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 07-7-26 下午4:35 from the specification file
 * <tt>gram/vtd/scanner.flex</tt>
 */
class Yylex extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\20\1\53\1\0"+
    "\1\3\1\0\1\0\1\54\1\11\1\12\1\21\1\6\1\10\1\4"+
    "\1\5\1\22\12\2\1\51\1\0\1\16\1\17\1\15\1\0\1\7"+
    "\32\0\1\13\1\0\1\14\1\0\1\0\1\0\1\30\1\46\1\40"+
    "\1\23\1\42\1\47\1\43\1\45\1\24\2\0\1\34\1\26\1\31"+
    "\1\27\1\37\1\0\1\32\1\35\1\36\1\41\1\25\1\44\1\55"+
    "\1\52\1\50\1\0\1\33\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\4\1\21\1\22\6\1\1\23\10\1\2\4"+
    "\1\0\2\3\1\24\1\25\1\26\1\27\1\30\3\1"+
    "\1\31\30\1\1\0\1\32\1\0\1\1\1\33\1\34"+
    "\1\1\1\35\1\36\34\1\1\0\11\1\1\0\1\37"+
    "\10\1\1\0\1\40\31\1\2\0\1\1\1\0\1\41"+
    "\4\1\1\0\1\42\1\0\1\43\3\1\2\0\1\1"+
    "\1\0\1\44\2\0\24\1\1\45\3\1\1\0\1\46"+
    "\4\1\1\0\1\47\1\1\1\50\7\1\1\0\1\51"+
    "\1\1\2\0\5\1\1\0\1\52\1\0\1\53\5\1"+
    "\1\0\1\54\2\1\1\0\1\1\1\55\3\1\2\0"+
    "\4\1\1\0\1\56\1\1\1\0\1\57\20\1\1\0"+
    "\1\60\2\1\2\0\1\1\1\0\1\61\3\1\1\0"+
    "\1\62\2\1\1\0\1\1\1\0\10\1\1\0\1\63"+
    "\2\1\1\64\1\0\1\65\5\1\1\0\1\1\1\66"+
    "\2\0\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\67\1\0\1\70\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\71\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\72\1\1\1\0\1\1\1\73\1\0\1\74"+
    "\5\1\1\0\1\1\1\75\2\1\1\0\1\1\1\76"+
    "\1\0\1\1\1\77\3\1\1\0\1\100\27\1\1\0"+
    "\1\101\1\0\1\102\23\1\1\0\1\103\1\0\1\104"+
    "\3\1\1\0\1\105\3\1\3\0\1\106\2\1\1\0"+
    "\1\107\2\1\1\0\1\110\1\1\6\0\1\1\1\0"+
    "\1\111\1\0\1\112\1\0\1\113\3\1\2\0\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\270\0\346\0\270"+
    "\0\270\0\270\0\270\0\270\0\270\0\270\0\u0114\0\u0142"+
    "\0\270\0\u0170\0\270\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\270\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\56\0\270\0\270\0\270\0\270\0\u0536\0\u0564\0\u0592"+
    "\0\56\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0450\0\270\0\u047e\0\u0a10\0\270\0\56\0\u0a3e"+
    "\0\56\0\56\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\270\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\270\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\270\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\270"+
    "\0\u1928\0\270\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c"+
    "\0\u1a6a\0\270\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e"+
    "\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee"+
    "\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e"+
    "\0\270\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\270\0\u1f44\0\u1f72"+
    "\0\u1fa0\0\u1fce\0\u1ffc\0\270\0\u202a\0\270\0\u2058\0\u2086"+
    "\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\270\0\u21c8"+
    "\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338"+
    "\0\270\0\u2366\0\270\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c"+
    "\0\u247a\0\270\0\u24a8\0\u24d6\0\u2504\0\u2532\0\270\0\u2560"+
    "\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0"+
    "\0\u26fe\0\270\0\u272c\0\u275a\0\270\0\u2788\0\u27b6\0\u27e4"+
    "\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954"+
    "\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\270\0\u2a96"+
    "\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\270\0\u2baa\0\u2bd8"+
    "\0\u2c06\0\u2c34\0\270\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a"+
    "\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a"+
    "\0\u2eb8\0\270\0\u2ee6\0\u2f14\0\270\0\u2f42\0\270\0\u2f70"+
    "\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\270\0\u30b2"+
    "\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6\0\u31f4\0\u3222"+
    "\0\u3250\0\u327e\0\270\0\u32ac\0\270\0\u32da\0\u3308\0\u3336"+
    "\0\u3364\0\u3392\0\u33c0\0\u33ee\0\270\0\u341c\0\u344a\0\u3478"+
    "\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e\0\270\0\u358c\0\u35ba"+
    "\0\u35e8\0\270\0\u3616\0\270\0\u3644\0\u3672\0\u36a0\0\u36ce"+
    "\0\u36fc\0\u372a\0\u3758\0\270\0\u3786\0\u37b4\0\u37e2\0\u3810"+
    "\0\270\0\u383e\0\u386c\0\270\0\u389a\0\u38c8\0\u38f6\0\u3924"+
    "\0\270\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66"+
    "\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6"+
    "\0\u3c04\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46"+
    "\0\u3d74\0\270\0\u3da2\0\270\0\u3dd0\0\u3dfe\0\u3e2c\0\u3e5a"+
    "\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca"+
    "\0\u3ff8\0\u4026\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a"+
    "\0\270\0\u4168\0\270\0\u4196\0\u41c4\0\u41f2\0\u4220\0\270"+
    "\0\u424e\0\u427c\0\u42aa\0\u42d8\0\u4306\0\u4334\0\270\0\u4362"+
    "\0\u4390\0\u43be\0\270\0\u43ec\0\u441a\0\u4448\0\270\0\u4476"+
    "\0\u44a4\0\u44d2\0\u4500\0\u452e\0\u455c\0\u458a\0\u45b8\0\u45e6"+
    "\0\270\0\u4614\0\270\0\u4642\0\270\0\u4670\0\u469e\0\u46cc"+
    "\0\u46fa\0\u4728\0\270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\2\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\2\1\41\2\2\1\42\1\43\1\2\1\5\1\2"+
    "\1\44\1\45\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\15\2\1\46\1\2\2\0\1\2\1\0"+
    "\1\3\56\0\1\4\2\0\1\47\126\0\1\2\1\0"+
    "\1\50\1\0\1\2\1\51\15\0\10\2\1\0\15\2"+
    "\1\46\1\2\2\0\1\2\17\0\1\52\55\0\1\53"+
    "\55\0\1\54\60\0\1\55\33\0\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\1\2\1\56\6\2\1\0\6\2"+
    "\1\57\6\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\4\2\1\60\3\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\7\2\1\61\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\6\2\1\62"+
    "\1\2\1\0\2\2\1\63\12\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\4\2\1\64"+
    "\1\65\2\2\1\0\5\2\1\66\7\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\4\2"+
    "\1\67\3\2\1\0\15\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\4\2\1\70\1\71"+
    "\2\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\2\2\1\72"+
    "\2\2\1\73\1\74\6\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\7\2\1\75\1\0"+
    "\6\2\1\76\6\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\4\2\1\77\1\100\1\2"+
    "\1\101\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\4\2\1\102\3\2\1\0"+
    "\6\2\1\103\2\2\1\104\3\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\3\2\1\105\11\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\4\2\1\106\3\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\4\2\1\107\1\110\2\2\1\0\1\111"+
    "\14\2\1\46\1\2\2\0\1\2\53\112\1\113\2\112"+
    "\54\114\1\113\1\114\1\115\1\0\1\115\1\0\2\115"+
    "\13\0\1\116\1\0\10\115\1\0\15\115\1\0\1\115"+
    "\2\0\1\115\2\0\1\47\53\0\1\2\1\0\1\50"+
    "\1\0\2\2\15\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\2\2"+
    "\1\117\5\2\1\0\15\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\1\2"+
    "\1\120\13\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\1\121\7\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\1\122\7\2\1\0\4\2\1\123\10\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\2\2\1\124\12\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\1\125\6\2\1\126"+
    "\1\0\2\2\1\127\12\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\3\2\1\130\4\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\3\2\1\131\4\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\5\2\1\132\7\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\4\2\1\133\10\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\6\2\1\134\1\2"+
    "\1\0\1\2\1\135\13\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\5\2\1\136\1\2"+
    "\1\137\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\3\2\1\140\4\2\1\0"+
    "\12\2\1\141\2\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\1\142\14\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\5\2\1\143\2\2\1\0\5\2\1\144\7\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\15\2\1\46\1\2\2\0\1\145"+
    "\1\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\1\2\1\146\13\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\7\2\1\147\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\4\2\1\150\3\2\1\0\6\2\1\151\6\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\3\2\1\152\2\2\1\153\1\2\1\0\5\2"+
    "\1\154\7\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\1\2\1\155\6\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\1\2\1\156\6\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\15\2\1\157\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\4\2\1\160\3\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\1\161\14\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\1\162\14\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\4\2\1\163\3\2\1\0\15\2"+
    "\1\46\1\2\2\0\1\2\1\115\1\0\1\115\1\0"+
    "\2\115\15\0\10\115\1\0\15\115\1\0\1\115\2\0"+
    "\1\115\1\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\4\2\1\164\10\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\6\2"+
    "\1\165\6\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\7\2\1\166\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\6\2\1\167\6\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\3\2\1\170"+
    "\4\2\1\0\15\2\1\46\1\2\2\0\2\2\1\171"+
    "\1\2\1\0\2\2\3\0\1\172\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\6\2\1\173\6\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\12\2\1\174\2\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\6\2\1\175"+
    "\1\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\5\2\1\176\2\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\7\2\1\177\5\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\2\2\1\200\12\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\7\2\1\201"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\1\2\1\202\6\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\203\1\2\1\0\2\2"+
    "\3\0\1\204\11\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\1\2\1\205\13\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\13\2"+
    "\1\206\1\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\6\2\1\207\1\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\6\2\1\210\6\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\2\2\1\211\12\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\1\2\1\212\6\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\6\2\1\213\6\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\4\2\1\214\10\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\4\2\1\215\10\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\3\2\1\216\4\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\2\2\1\217\1\2"+
    "\1\220\10\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\6\2\1\221\1\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\1\222\14\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\1\223\14\2\1\46\1\2\2\0\1\2\1\115\1\0"+
    "\1\115\1\0\2\115\13\0\1\116\1\0\1\115\1\224"+
    "\6\115\1\0\7\115\1\225\1\226\4\115\1\0\1\115"+
    "\2\0\1\115\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\1\227\14\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\1\230"+
    "\14\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\1\2\1\231\13\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\4\2\1\232\3\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\6\2\1\233\6\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\1\2\1\234"+
    "\13\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\1\2\1\235\6\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\236\1\2\1\0\2\2\3\0"+
    "\1\237\11\0\10\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\5\2\1\240"+
    "\2\2\1\0\15\2\1\46\1\2\2\0\1\2\1\0"+
    "\1\171\7\0\1\172\44\0\1\2\1\241\1\2\1\0"+
    "\2\2\3\0\1\242\11\0\10\2\1\0\1\2\1\243"+
    "\13\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\6\2\1\244\6\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\1\245\7\2\1\0\15\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\1\246"+
    "\14\2\1\46\1\2\2\0\2\2\1\247\1\2\1\0"+
    "\2\2\3\0\1\250\11\0\10\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\251\1\2\1\0\2\2\3\0"+
    "\1\252\11\0\10\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\2\2\1\253\12\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\6\2\1\254\1\2\1\0"+
    "\15\2\1\46\1\2\2\0\1\2\1\0\1\203\7\0"+
    "\1\204\44\0\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\2\2\1\255\12\2\1\46\1\2\2\0"+
    "\2\2\1\256\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\15\2\1\257\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\1\2\1\260\13\2\1\46"+
    "\1\2\2\0\2\2\1\261\1\2\1\0\2\2\3\0"+
    "\1\262\11\0\10\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\263\1\2\1\0\2\2\3\0\1\264\11\0"+
    "\10\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\2\2\1\265"+
    "\12\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\6\2\1\266\1\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\6\2\1\267\6\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\6\2\1\270\6\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\6\2\1\271"+
    "\6\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\5\2\1\272\2\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\5\2\1\273\2\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\2\2\1\274\12\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\1\2\1\275\6\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\1\276\7\2\1\0\15\2\1\46\1\2"+
    "\2\0\1\2\1\115\1\0\1\115\1\0\2\115\15\0"+
    "\6\115\1\277\1\115\1\0\15\115\1\0\1\115\2\0"+
    "\2\115\1\0\1\115\1\0\2\115\15\0\10\115\1\0"+
    "\6\115\1\300\6\115\1\0\1\115\2\0\2\115\1\0"+
    "\1\115\1\0\2\115\15\0\1\115\1\301\6\115\1\0"+
    "\15\115\1\0\1\115\2\0\1\115\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\6\2\1\302\6\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\4\2\1\303\3\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\6\2\1\304\6\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\7\2\1\305\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\6\2\1\306\1\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\2\2\1\307\12\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\12\2\1\310\2\2\1\46\1\2\2\0\1\2\1\0"+
    "\1\236\7\0\1\237\45\0\1\237\10\0\1\311\43\0"+
    "\1\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\1\312\14\2\1\46\1\2\2\0\1\2\1\0\1\241"+
    "\7\0\1\242\44\0\1\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\3\2\1\313\11\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\7\2"+
    "\1\314\1\0\15\2\1\46\1\2\2\0\2\2\1\315"+
    "\1\2\1\0\2\2\3\0\1\316\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\1\317\1\2\15\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\1\2\1\0\1\247\7\0\1\250\45\0\1\251"+
    "\7\0\1\252\44\0\1\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\1\2\1\320\13\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\7\2\1\321\5\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\7\2\1\322\1\0"+
    "\15\2\1\46\1\2\2\0\1\2\1\0\1\256\47\0"+
    "\1\323\4\0\1\115\1\0\1\115\1\0\2\115\13\0"+
    "\1\116\1\0\10\115\1\0\15\115\1\324\1\115\2\0"+
    "\1\115\1\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\1\325\14\2\1\46\1\2\2\0\1\2\1\0"+
    "\1\261\7\0\1\262\45\0\1\263\7\0\1\264\45\0"+
    "\1\264\10\0\1\326\43\0\1\2\1\0\1\2\1\0"+
    "\2\2\15\0\1\2\1\327\6\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\2\2\1\330\12\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\1\2\1\331\13\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\1\332\7\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\6\2\1\333\1\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\1\2"+
    "\1\334\6\2\1\0\15\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\2\2"+
    "\1\335\12\2\1\46\1\2\2\0\2\2\1\336\1\2"+
    "\1\0\2\2\3\0\1\337\11\0\10\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\6\2\1\340\1\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\341\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\15\2\1\342\1\2\2\0\1\2\1\115\1\0"+
    "\1\115\1\0\2\115\15\0\10\115\1\0\2\115\1\343"+
    "\12\115\1\0\1\115\2\0\2\115\1\0\1\115\1\0"+
    "\2\115\15\0\4\115\1\344\3\115\1\0\15\115\1\0"+
    "\1\115\2\0\2\115\1\0\1\115\1\0\2\115\15\0"+
    "\10\115\1\0\2\115\1\345\12\115\1\0\1\115\2\0"+
    "\1\115\1\2\1\0\1\2\1\0\2\2\15\0\5\2"+
    "\1\346\2\2\1\0\15\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\10\2"+
    "\1\347\4\2\1\46\1\2\2\0\2\2\1\350\1\2"+
    "\1\0\2\2\3\0\1\351\11\0\10\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\352\1\2\1\0\2\2"+
    "\3\0\1\353\11\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\1\354"+
    "\7\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\4\2\1\355\3\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\5\2\1\356\7\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\1\2\1\357\6\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\5\2\1\360"+
    "\2\2\1\0\15\2\1\46\1\2\2\0\2\2\1\361"+
    "\1\2\1\0\2\2\3\0\1\362\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\1\2\1\0\1\315\7\0"+
    "\1\316\44\0\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\6\2\1\363\1\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\1\364\1\2\15\0\10\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\365\1\2"+
    "\1\0\1\366\1\2\3\0\1\367\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\1\2\1\370\6\2\1\0\15\2\1\46"+
    "\1\2\2\0\1\2\51\0\1\324\4\0\1\2\1\0"+
    "\1\2\1\0\2\2\15\0\5\2\1\371\2\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\4\2\1\372\3\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\373\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\15\2\1\374\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\1\2\1\375"+
    "\13\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\1\2\1\376\6\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\2\2\1\377\12\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\6\2\1\u0100"+
    "\1\2\1\0\15\2\1\46\1\2\2\0\2\2\1\u0101"+
    "\1\2\1\0\2\2\3\0\1\u0102\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\1\2\1\0\1\336\7\0"+
    "\1\337\44\0\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\7\2\1\u0103\5\2\1\46\1\2\2\0"+
    "\1\2\1\0\1\341\47\0\1\u0104\4\0\1\115\1\0"+
    "\1\115\1\0\2\115\13\0\1\116\1\0\10\115\1\0"+
    "\15\115\1\u0105\1\115\2\0\2\115\1\0\1\115\1\0"+
    "\2\115\15\0\10\115\1\0\6\115\1\u0106\6\115\1\0"+
    "\1\115\2\0\2\115\1\0\1\115\1\0\2\115\15\0"+
    "\3\115\1\u0107\4\115\1\0\15\115\1\0\1\115\2\0"+
    "\2\115\1\0\1\115\1\0\2\115\15\0\10\115\1\0"+
    "\11\115\1\u0108\3\115\1\0\1\115\2\0\1\115\1\2"+
    "\1\0\1\2\1\0\2\2\15\0\6\2\1\u0109\1\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\1\2\1\u010a\6\2\1\0\15\2"+
    "\1\46\1\2\2\0\1\2\1\0\1\350\7\0\1\351"+
    "\45\0\1\352\7\0\1\353\44\0\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\5\2\1\u010b\2\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\7\2\1\u010c\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\2\2\1\u010d\12\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\14\2\1\u010e"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\4\2\1\u010f\10\2\1\46\1\2"+
    "\2\0\1\2\1\0\1\361\7\0\1\362\44\0\1\2"+
    "\1\0\1\2\1\0\2\2\15\0\5\2\1\u0110\2\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\10\2\1\u0111\4\2"+
    "\1\46\1\2\2\0\1\2\1\0\1\365\7\0\1\367"+
    "\44\0\1\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\1\u0112\14\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\6\2\1\u0113\1\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\2\2\1\u0114\12\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\6\2\1\u0115\1\2\1\0\15\2\1\46\1\2\2\0"+
    "\1\2\1\0\1\373\47\0\1\u0116\4\0\1\115\1\0"+
    "\1\115\1\0\2\115\13\0\1\116\1\0\10\115\1\0"+
    "\15\115\1\u0117\1\115\2\0\1\115\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\1\2\1\u0118\6\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\6\2\1\u0119\1\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\u011a\1\2\1\0\2\2\3\0\1\u011b"+
    "\11\0\10\2\1\0\15\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\1\2"+
    "\1\u011c\13\2\1\46\1\2\2\0\1\2\1\0\1\u0101"+
    "\7\0\1\u0102\44\0\1\2\1\u011d\1\2\1\0\2\2"+
    "\3\0\1\u011e\11\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\1\2\51\0\1\u0105\4\0\1\115\1\0\1\115"+
    "\1\0\2\115\15\0\7\115\1\u011f\1\0\15\115\1\0"+
    "\1\115\2\0\2\115\1\0\1\115\1\0\2\115\15\0"+
    "\10\115\1\0\6\115\1\u0120\6\115\1\0\1\115\2\0"+
    "\2\115\1\0\1\115\1\0\2\115\15\0\1\115\1\u0121"+
    "\6\115\1\0\15\115\1\0\1\115\2\0\1\115\1\2"+
    "\1\u0122\1\2\1\0\2\2\3\0\1\u0123\11\0\10\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\6\2\1\u0124\1\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\6\2\1\u0125\1\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\u0126\1\2\1\0\1\u0127\1\2\15\0"+
    "\10\2\1\0\15\2\1\u0128\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\6\2\1\u0129"+
    "\6\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\6\2\1\u012a\6\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\6\2\1\u012b\6\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\3\2\1\u012c"+
    "\4\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\1\2\1\u012d\6\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\6\2\1\u012e\6\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\7\2\1\u012f\5\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\6\2\1\u0130\6\2\1\46\1\2\2\0\2\2\1\u0131"+
    "\1\2\1\0\2\2\3\0\1\u0132\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\1\2\51\0\1\u0117\4\0"+
    "\1\2\1\0\1\2\1\0\2\2\15\0\6\2\1\u0133"+
    "\1\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\7\2\1\u0134"+
    "\5\2\1\46\1\2\2\0\1\2\1\0\1\u011a\7\0"+
    "\1\u011b\45\0\1\u011b\10\0\1\u0135\43\0\1\2\1\u0136"+
    "\1\2\1\0\2\2\3\0\1\u0137\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\1\2\1\0\1\u011d\7\0"+
    "\1\u011e\44\0\1\115\1\0\1\115\1\0\2\115\15\0"+
    "\10\115\1\0\1\115\1\u0138\13\115\1\0\1\115\2\0"+
    "\2\115\1\0\1\115\1\0\2\115\15\0\10\115\1\0"+
    "\2\115\1\u0139\12\115\1\0\1\115\2\0\2\115\1\0"+
    "\1\115\1\0\2\115\15\0\6\115\1\u013a\1\115\1\0"+
    "\15\115\1\0\1\115\2\0\1\115\1\0\1\u0122\7\0"+
    "\1\u0123\44\0\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\7\2\1\u013b\5\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\2\2\1\u013c\12\2\1\46\1\2\2\0\1\2\1\0"+
    "\1\u0126\47\0\1\u013d\4\0\1\2\1\0\1\2\1\0"+
    "\2\2\15\0\4\2\1\u013e\3\2\1\0\15\2\1\46"+
    "\1\2\2\0\1\2\1\115\1\0\1\115\1\0\2\115"+
    "\13\0\1\116\1\0\10\115\1\0\15\115\1\u013f\1\115"+
    "\2\0\1\115\1\2\1\u0140\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\15\2\1\u0141\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\1\u0142\1\2\15\0\10\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\u0143\1\2\1\0\1\u0144"+
    "\1\2\15\0\10\2\1\0\15\2\1\u0145\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\6\2\1\u0146\6\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\2\2\1\u0147"+
    "\12\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\6\2\1\u0148\1\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\u0149\1\2\1\0\1\u014a\1\2"+
    "\3\0\1\u014b\11\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\u014c\1\2\1\0\2\2\3\0\1\u014d"+
    "\11\0\10\2\1\0\15\2\1\46\1\2\2\0\1\2"+
    "\1\0\1\u0131\7\0\1\u0132\44\0\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\7\2\1\u014e\5\2"+
    "\1\46\1\2\2\0\2\2\1\u014f\1\2\1\0\1\u0150"+
    "\1\2\15\0\10\2\1\0\15\2\1\u0151\1\2\2\0"+
    "\1\2\1\0\1\u0136\7\0\1\u0137\44\0\1\115\1\0"+
    "\1\115\1\0\2\115\15\0\10\115\1\0\6\115\1\u0152"+
    "\6\115\1\0\1\115\2\0\2\115\1\0\1\115\1\0"+
    "\2\115\15\0\7\115\1\u0153\1\0\15\115\1\0\1\115"+
    "\2\0\2\115\1\u0154\1\115\1\0\2\115\3\0\1\u0155"+
    "\11\0\10\115\1\0\15\115\1\0\1\115\2\0\1\115"+
    "\1\2\1\u0156\1\2\1\0\1\u0157\1\2\15\0\10\2"+
    "\1\0\15\2\1\u0158\1\2\2\0\2\2\1\u0159\1\2"+
    "\1\0\1\u015a\1\2\15\0\10\2\1\0\15\2\1\u015b"+
    "\1\2\2\0\1\2\51\0\1\u013f\4\0\1\2\1\0"+
    "\1\2\1\0\2\2\15\0\7\2\1\u015c\1\0\15\2"+
    "\1\46\1\2\2\0\1\2\1\0\1\u0140\47\0\1\u015d"+
    "\4\0\1\115\1\0\1\115\1\0\2\115\13\0\1\116"+
    "\1\0\10\115\1\0\15\115\1\u015e\1\115\2\0\1\115"+
    "\1\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\1\2\1\u015f\13\2\1\46\1\2\2\0\1\2\1\0"+
    "\1\u0143\47\0\1\u0160\4\0\1\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\5\2\1\u0161\7\2\1\46"+
    "\1\2\2\0\1\2\1\115\1\0\1\115\1\0\2\115"+
    "\13\0\1\116\1\0\10\115\1\0\15\115\1\u0162\1\115"+
    "\2\0\1\115\1\2\1\u0163\1\2\1\0\2\2\3\0"+
    "\1\u0164\11\0\10\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\11\2\1\u0165\3\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\7\2\1\u0166"+
    "\5\2\1\46\1\2\2\0\1\2\1\0\1\u0149\7\0"+
    "\1\u014b\44\0\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\5\2\1\u0167\2\2\1\0\12\2\1\u0168\2\2\1\46"+
    "\1\2\2\0\1\2\1\0\1\u014c\7\0\1\u014d\44\0"+
    "\1\2\1\0\1\2\1\0\1\u0169\1\2\15\0\10\2"+
    "\1\0\15\2\1\46\1\2\2\0\1\2\1\0\1\u014f"+
    "\47\0\1\u016a\4\0\1\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\1\2\1\u016b\13\2\1\46\1\2"+
    "\2\0\1\2\1\115\1\0\1\115\1\0\2\115\13\0"+
    "\1\116\1\0\10\115\1\0\15\115\1\u016c\1\115\2\0"+
    "\2\115\1\0\1\115\1\0\2\115\15\0\10\115\1\0"+
    "\4\115\1\u016d\10\115\1\0\1\115\2\0\2\115\1\0"+
    "\1\115\1\0\2\115\15\0\10\115\1\0\15\115\1\0"+
    "\1\u016e\2\0\1\115\1\0\1\u0154\7\0\1\u0155\45\0"+
    "\1\u0156\47\0\1\u016f\4\0\1\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\1\2\1\u0170\13\2\1\46"+
    "\1\2\2\0\1\2\1\115\1\0\1\115\1\0\2\115"+
    "\13\0\1\116\1\0\10\115\1\0\15\115\1\u0171\1\115"+
    "\2\0\1\115\1\0\1\u0159\47\0\1\u0172\4\0\1\2"+
    "\1\0\1\2\1\0\2\2\15\0\4\2\1\u0173\3\2"+
    "\1\0\15\2\1\46\1\2\2\0\1\2\1\115\1\0"+
    "\1\115\1\0\2\115\13\0\1\116\1\0\10\115\1\0"+
    "\15\115\1\u0174\1\115\2\0\1\115\1\2\1\0\1\2"+
    "\1\0\1\u0175\1\2\15\0\10\2\1\0\15\2\1\46"+
    "\1\2\2\0\1\2\51\0\1\u015e\4\0\1\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\3\2\1\u0176"+
    "\11\2\1\46\1\2\2\0\1\2\51\0\1\u0162\4\0"+
    "\1\2\1\0\1\2\1\0\2\2\15\0\7\2\1\u0177"+
    "\1\0\15\2\1\46\1\2\2\0\1\2\1\0\1\u0163"+
    "\7\0\1\u0164\44\0\1\2\1\u0178\1\2\1\0\2\2"+
    "\3\0\1\u0179\11\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\2\2\1\u017a\12\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\13\2"+
    "\1\u017b\1\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\6\2\1\u017c\6\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\1\2\1\u017d\6\2\1\0\15\2\1\46\1\2"+
    "\2\0\1\2\51\0\1\u016c\4\0\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\1\2\1\u017e\6\2\1\0\15\2"+
    "\1\46\1\2\2\0\1\2\1\115\1\0\1\115\1\0"+
    "\2\115\15\0\10\115\1\0\2\115\1\u017f\12\115\1\0"+
    "\1\115\2\0\2\115\1\0\1\115\1\0\1\u0180\1\115"+
    "\15\0\10\115\1\0\15\115\1\0\1\115\2\0\1\115"+
    "\51\0\1\u0171\4\0\1\2\1\0\1\2\1\0\2\2"+
    "\15\0\1\2\1\u0181\6\2\1\0\15\2\1\46\1\2"+
    "\2\0\1\2\51\0\1\u0174\4\0\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\7\2\1\u0182\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\1\2\1\u0183\13\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\5\2\1\u0184"+
    "\2\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\1\2\1\u0185\6\2\1\0"+
    "\15\2\1\46\1\2\2\0\1\2\1\0\1\u0178\7\0"+
    "\1\u0179\44\0\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\11\2\1\u0186\3\2\1\46\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\2\2\1\u0187\12\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\13\2\1\u0188"+
    "\1\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\6\2\1\u0189\1\2\1\0\15\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\12\2\1\u018a\2\2\1\46\1\2\2\0"+
    "\1\2\1\115\1\0\1\115\1\0\2\115\15\0\1\115"+
    "\1\u018b\6\115\1\0\15\115\1\0\1\115\2\0\2\115"+
    "\1\0\1\115\1\0\2\115\15\0\10\115\1\0\2\115"+
    "\1\u018c\12\115\1\0\1\115\2\0\1\115\1\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\12\2\1\u018d"+
    "\2\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\1\u018e\1\2\15\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\6\2\1\u018f\6\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\4\2"+
    "\1\u0190\10\2\1\46\1\2\2\0\2\2\1\u0191\1\2"+
    "\1\0\2\2\3\0\1\u0192\11\0\10\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\u0193\1\2\1\0\2\2"+
    "\3\0\1\u0194\11\0\10\2\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\6\2\1\u0195\6\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\4\2\1\u0196\3\2"+
    "\1\0\15\2\1\46\1\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\1\2\1\u0197\13\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\1\u0198\14\2\1\46\1\2\2\0"+
    "\1\2\1\115\1\0\1\115\1\0\2\115\15\0\4\115"+
    "\1\u0199\3\115\1\0\15\115\1\0\1\115\2\0\2\115"+
    "\1\0\1\115\1\0\2\115\15\0\10\115\1\0\15\115"+
    "\1\0\1\u019a\2\0\1\115\1\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\1\u019b\14\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\1\2\1\u019c\13\2\1\46\1\2\2\0\2\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\1\u019d"+
    "\14\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\6\2\1\u019e\6\2\1\46"+
    "\1\2\2\0\1\2\1\0\1\u0191\7\0\1\u0192\45\0"+
    "\1\u0193\7\0\1\u0194\44\0\1\2\1\0\1\2\1\0"+
    "\2\2\15\0\7\2\1\u019f\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\7\2"+
    "\1\u01a0\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\2\2\1\u01a1"+
    "\12\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\1\2\1\u01a2\6\2\1\0\15\2\1\46"+
    "\1\2\2\0\1\2\1\115\1\0\1\115\1\0\2\115"+
    "\15\0\6\115\1\u01a3\1\115\1\0\15\115\1\0\1\115"+
    "\2\0\2\115\1\0\1\115\1\0\2\115\15\0\10\115"+
    "\1\0\3\115\1\u01a4\11\115\1\0\1\115\2\0\1\115"+
    "\1\2\1\0\1\2\1\0\2\2\15\0\1\2\1\u01a5"+
    "\6\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\6\2\1\u01a6"+
    "\6\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\13\2\1\u01a7\1\2\1\46"+
    "\1\2\2\0\2\2\1\u01a8\1\2\1\0\2\2\3\0"+
    "\1\u01a9\11\0\10\2\1\0\15\2\1\46\1\2\2\0"+
    "\2\2\1\u01aa\1\2\1\0\2\2\3\0\1\u01ab\11\0"+
    "\10\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\10\2\1\0\6\2\1\u01ac"+
    "\6\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\7\2\1\u01ad\1\0\15\2\1\46\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\2\2\15\0\6\2"+
    "\1\u01ae\1\2\1\0\15\2\1\46\1\2\2\0\1\2"+
    "\1\115\1\u01af\1\115\1\0\2\115\3\0\1\u01b0\11\0"+
    "\10\115\1\0\15\115\1\0\1\115\2\0\2\115\1\0"+
    "\1\115\1\0\2\115\15\0\10\115\1\0\6\115\1\u01b1"+
    "\6\115\1\0\1\115\2\0\1\115\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\6\2\1\u01b2\1\2\1\0\15\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\1\u01b3\14\2\1\46\1\2\2\0"+
    "\2\2\1\u01b4\1\2\1\0\2\2\15\0\10\2\1\0"+
    "\15\2\1\u01b5\1\2\2\0\1\2\1\0\1\u01a8\7\0"+
    "\1\u01a9\45\0\1\u01aa\7\0\1\u01ab\44\0\1\2\1\u01b6"+
    "\1\2\1\0\2\2\3\0\1\u01b7\11\0\10\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\15\0\10\2\1\0\5\2\1\u01b8\7\2\1\46"+
    "\1\2\2\0\2\2\1\0\1\2\1\0\2\2\15\0"+
    "\10\2\1\0\7\2\1\u01b9\5\2\1\46\1\2\2\0"+
    "\1\2\1\0\1\u01af\7\0\1\u01b0\44\0\1\115\1\u01ba"+
    "\1\115\1\0\2\115\3\0\1\u01bb\11\0\10\115\1\0"+
    "\15\115\1\0\1\115\2\0\1\115\1\2\1\0\1\2"+
    "\1\0\2\2\15\0\10\2\1\0\7\2\1\u01bc\5\2"+
    "\1\46\1\2\2\0\2\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\13\2\1\u01bd\1\2\1\46\1\2"+
    "\2\0\1\2\1\0\1\u01b4\47\0\1\u01be\4\0\1\115"+
    "\1\0\1\115\1\0\2\115\13\0\1\116\1\0\10\115"+
    "\1\0\15\115\1\u01bf\1\115\2\0\1\115\1\0\1\u01b6"+
    "\7\0\1\u01b7\44\0\1\2\1\0\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\4\2\1\u01c0\10\2\1\46\1\2"+
    "\2\0\2\2\1\u01c1\1\2\1\0\2\2\15\0\10\2"+
    "\1\0\15\2\1\u01c2\1\2\2\0\1\2\1\0\1\u01ba"+
    "\7\0\1\u01bb\44\0\1\2\1\u01c3\1\2\1\0\2\2"+
    "\15\0\10\2\1\0\15\2\1\u01c4\1\2\2\0\2\2"+
    "\1\u01c5\1\2\1\0\2\2\15\0\10\2\1\0\15\2"+
    "\1\u01c6\1\2\2\0\1\2\51\0\1\u01bf\4\0\1\2"+
    "\1\0\1\2\1\0\2\2\15\0\10\2\1\0\2\2"+
    "\1\u01c7\12\2\1\46\1\2\2\0\1\2\1\0\1\u01c1"+
    "\47\0\1\u01c8\4\0\1\115\1\0\1\115\1\0\2\115"+
    "\13\0\1\116\1\0\10\115\1\0\15\115\1\u01c9\1\115"+
    "\2\0\1\115\1\0\1\u01c3\47\0\1\u01ca\4\0\1\115"+
    "\1\0\1\115\1\0\2\115\13\0\1\116\1\0\10\115"+
    "\1\0\15\115\1\u01cb\1\115\2\0\1\115\1\0\1\u01c5"+
    "\47\0\1\u01cc\4\0\1\115\1\0\1\115\1\0\2\115"+
    "\13\0\1\116\1\0\10\115\1\0\15\115\1\u01cd\1\115"+
    "\2\0\1\115\1\2\1\0\1\2\1\0\2\2\15\0"+
    "\1\2\1\u01ce\6\2\1\0\15\2\1\46\1\2\2\0"+
    "\1\2\51\0\1\u01c9\55\0\1\u01cb\55\0\1\u01cd\4\0"+
    "\1\2\1\0\1\2\1\0\2\2\15\0\4\2\1\u01cf"+
    "\3\2\1\0\15\2\1\46\1\2\2\0\2\2\1\0"+
    "\1\2\1\0\2\2\15\0\6\2\1\u01d0\1\2\1\0"+
    "\15\2\1\46\1\2\2\0\2\2\1\u01d1\1\2\1\0"+
    "\2\2\3\0\1\u01d2\11\0\10\2\1\0\15\2\1\46"+
    "\1\2\2\0\1\2\1\0\1\u01d1\7\0\1\u01d2\45\0"+
    "\1\u01d2\10\0\1\u01d3\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18262];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\2\11\1\1\7\11\2\1\1\11\1\1"+
    "\1\11\7\1\1\11\12\1\1\0\3\1\4\11\34\1"+
    "\1\0\1\11\1\0\1\1\1\11\40\1\1\0\11\1"+
    "\1\0\1\11\10\1\1\0\1\11\31\1\2\0\1\1"+
    "\1\0\1\11\4\1\1\0\1\11\1\0\1\11\3\1"+
    "\2\0\1\1\1\0\1\11\2\0\24\1\1\11\3\1"+
    "\1\0\1\11\4\1\1\0\1\11\1\1\1\11\7\1"+
    "\1\0\1\11\1\1\2\0\5\1\1\0\1\11\1\0"+
    "\1\11\5\1\1\0\1\11\2\1\1\0\1\1\1\11"+
    "\3\1\2\0\4\1\1\0\1\11\1\1\1\0\1\11"+
    "\20\1\1\0\1\11\2\1\2\0\1\1\1\0\1\11"+
    "\3\1\1\0\1\11\2\1\1\0\1\1\1\0\10\1"+
    "\1\0\1\11\2\1\1\11\1\0\1\11\5\1\1\0"+
    "\1\1\1\11\2\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\1\0\1\11\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\11\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\11\1\1\1\0\1\1\1\11"+
    "\1\0\1\11\5\1\1\0\1\1\1\11\2\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\11\3\1\1\0\1\11"+
    "\27\1\1\0\1\11\1\0\1\11\23\1\1\0\1\11"+
    "\1\0\1\11\3\1\1\0\1\11\3\1\3\0\1\11"+
    "\2\1\1\0\1\11\2\1\1\0\1\11\1\1\6\0"+
    "\1\1\1\0\1\11\1\0\1\11\1\0\1\11\3\1"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }

  int isName; 
  NameType name;
  FuncName fname; 
  Ntest ntest;
  AxisType at;
  int len;
  String literal;
  Double number; 
  int colonPosition;

  /* public void report_error(String message, Object info) {
	//throw new XPathParseException("Syntax error during parsing");
  }

  public void report_fatal_error(String message, Object info) throws XPathParseException{
	throw new XPathParseException("Syntax error during parsing: "+ message);
  }

  public void syntax_error(Symbol cur_token) {
	
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) throws XPathParseException{
	throw new XPathParseException("XPath Syntax error: "+cur_token);
  }*/



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
  	isName = 1;
	colonPosition = -1;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, XPathParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONTAINS;
				fname = new FuncName();
				fname.i = FuncName.CONTAINS;
				return sym(FNAME,fname);
          }
        case 77: break;
        case 66: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STRING_LENGTH;
				fname = new FuncName();
				fname.i = FuncName.STRING_LENGTH;
				return sym(FNAME,fname);
          }
        case 78: break;
        case 51: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.POSITION;
				fname = new FuncName();
				fname.i = FuncName.POSITION;
				return sym(FNAME,fname);
          }
        case 79: break;
        case 25: 
          { if (isName == 0) {	
		 isName = 1 ;
		 return sym(OR);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "or";
		 return sym(NAME,name);
	      }
          }
        case 80: break;
        case 23: 
          { isName = 1 ; return sym(NE);
          }
        case 81: break;
        case 30: 
          { if (isName == 0) {
		isName = 1 ;
		 return sym(AND);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "add";
		 return sym(NAME,name);
	      }
          }
        case 82: break;
        case 12: 
          { isName = 1 ; /*System.out.println( "[ returned");*/ return sym(LB);
          }
        case 83: break;
        case 75: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT_OR_SELF;
				return sym(AXISNAME,at);
          }
        case 84: break;
        case 11: 
          { isName = 0 ; return sym(RP);
          }
        case 85: break;
        case 59: 
          { isName =0;
				at = new AxisType();
				at.i = AxisType.NAMESPACE;
				return sym(AXISNAME,at);
          }
        case 86: break;
        case 69: 
          { isName = 1;
    yypushback(1);
    fname = new FuncName();
    fname.i = FuncName.GP_INTERSECTION;
    return sym(FNAME, fname);
          }
        case 87: break;
        case 35: 
          { isName = 1; 
			 	yypushback(1);
				fname = new FuncName();
				fname.i = FuncName.LAST;
				return sym(FNAME,fname);
          }
        case 88: break;
        case 17: 
          { if (isName ==0){
		isName = 1;
		//System.out.println("returned a MULT");
		return  sym(MULT);
	}
	 else {
		isName = 0;
		name = new NameType();
		name.qname = "*";
		return sym(NAME,name);
	 }
          }
        case 89: break;
        case 71: 
          { isName = 1;
    yypushback(1);
    fname = new FuncName();
    fname.i = FuncName.GP_GEOMETRY_TYPE;
    return sym(FNAME, fname);
          }
        case 90: break;
        case 64: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STARTS_WITH;
				fname = new FuncName();
				fname.i = FuncName.STARTS_WITH;
				return sym(FNAME,fname);
          }
        case 91: break;
        case 8: 
          { isName = 1 ; return sym(AT);
          }
        case 92: break;
        case 6: 
          { isName = 0 ; /*System.out.println(". returned ");*/ return sym(DOT);
          }
        case 93: break;
        case 27: 
          { isName = 0;
				len = yytext().length();
				name = new NameType();
                               if (!XMLChar.isNCNameStartChar(yytext().charAt(0)))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<len-2;i++){
					if (!XMLChar.isNCNameChar(yytext().charAt(i)))
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
				}

				name.prefix = yytext().substring(0,len-2);
				name.localname = "*";
				//System.out.println("NAME "+name+ " returned");
				return sym(NAME,name);
          }
        case 94: break;
        case 34: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LANG;
				fname = new FuncName();
				fname.i = FuncName.LANG;
				return sym(FNAME,fname);
          }
        case 95: break;
        case 70: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_BEFORE;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_BEFORE;
				return sym(FNAME,fname);
          }
        case 96: break;
        case 33: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAME;
				fname = new FuncName();
				fname.i = FuncName.NAME;
				return sym(FNAME,fname);
          }
        case 97: break;
        case 37: 
          { isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.NODE;
				ntest.arg = null;
				return sym(NTEST,ntest);
          }
        case 98: break;
        case 42: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FALSE;
				fname = new FuncName();
				fname.i = FuncName.FALSE;
				return sym(FNAME,fname);
          }
        case 99: break;
        case 60: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.LOCAL_NAME;
				fname = new FuncName();
				fname.i = FuncName.LOCAL_NAME;
				return sym(FNAME,fname);
          }
        case 100: break;
        case 45: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.STRING;
				fname = new FuncName();
				fname.i = FuncName.STRING;
				return sym(FNAME,fname);
          }
        case 101: break;
        case 14: 
          { isName = 1 ; return sym(GT);
          }
        case 102: break;
        case 52: 
          { isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.COMMENT;
				ntest.arg =  null;
				return sym(NTEST,ntest);
          }
        case 103: break;
        case 50: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.BOOLEAN;
				fname = new FuncName();
				fname.i = FuncName.BOOLEAN;
				return sym(FNAME,fname);
          }
        case 104: break;
        case 1: 
          { isName = 0;
				name = new NameType();
				//name.qname = new String(yytext());
				//System.out.println("returned a NAME ==>" + yytext());
				//if (yytext().charAt(0) =='-'){
				//    throw new XPathParseException("Invalid char in name token:"+yytext());
				//}
				
				name.qname = new String(yytext());
				if (!XMLChar.isNCNameStartChar(name.qname.charAt(0)))
					throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position 0");
				
				for(int i=1;i<name.qname.length();i++){
					if (!XMLChar.isNCNameChar(name.qname.charAt(i)) 
						&& name.qname.charAt(i)!=':' )
						throw new XPathParseException("Invalid char in name token:  "+yytext()+ "@position "+i);
					if (name.qname.charAt(i)==':'){
						colonPosition = i;
					}
				}
		
				if (colonPosition != -1){
					name.prefix = yytext().substring(0,colonPosition);
					name.localname = yytext().substring(colonPosition+1);				
				}
				
				colonPosition = -1;
				return sym(NAME,name);
          }
        case 105: break;
        case 16: 
          { isName = 1 ; return sym(EQ);
          }
        case 106: break;
        case 4: 
          { throw new XPathParseException("Invalid char in XPath Expression");
          }
        case 107: break;
        case 58: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.ATTRIBUTE;
				return sym(AXISNAME,at);
          }
        case 108: break;
        case 3: 
          { isName = 0;
				number = new Double(yytext());
				//System.out.println("number returned ==> "+ Double.parseDouble(yytext()));
				return sym(NUMBER,number);
          }
        case 109: break;
        case 43: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FLOOR;
				fname = new FuncName();
				fname.i = FuncName.FLOOR;
				return sym(FNAME,fname);
          }
        case 110: break;
        case 32: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUM;
				fname = new FuncName();
				fname.i = FuncName.SUM;
				return sym(FNAME,fname);
          }
        case 111: break;
        case 29: 
          { if (isName == 0) {
		  isName = 1 ;
		 return sym(MOD);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "mod";
		 //System.out.println("returned a NAME "+yytext());
		 return sym(NAME,name);
	      }
          }
        case 112: break;
        case 28: 
          { if (isName == 0 ) {
		  isName = 1 ;
		 return sym(DIV);
	      } else {
		 isName = 0;
		 name = new NameType();
		 name.qname = "div";
		 return sym(NAME,name);
	      }
          }
        case 113: break;
        case 26: 
          { isName = 0;
				len = yytext().length();
				literal = yytext().substring(1, len-1);
				return sym(LITERAL,literal);
          }
        case 114: break;
        case 18: 
          { isName = 1 ; 
	 //System.out.println("SLASH returned ");
	 return sym(SLASH);
          }
        case 115: break;
        case 15: 
          { isName = 1 ; return sym(LT);
          }
        case 116: break;
        case 24: 
          { isName = 1 ; 
	 //System.out.println("DSLASH returned "); 
	 return sym(DSLASH);
          }
        case 117: break;
        case 76: 
          { isName = 0;
						ntest = new Ntest();
						ntest.i = Ntest.PROCESSING_INSTRUCTION;
						ntest.arg = null;
						return sym(NTEST,ntest);
          }
        case 118: break;
        case 13: 
          { isName = 0 ; return sym(RB);
          }
        case 119: break;
        case 68: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_AFTER;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_AFTER;
				return sym(FNAME,fname);
          }
        case 120: break;
        case 36: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRUE;
				fname = new FuncName();
				fname.i = FuncName.TRUE;
				return sym(FNAME,fname);
          }
        case 121: break;
        case 49: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CEILING;
				fname = new FuncName();
				fname.i = FuncName.CEILING;
				return sym(FNAME,fname);
          }
        case 122: break;
        case 20: 
          { isName = 0 ; return sym(DDOT);
          }
        case 123: break;
        case 73: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING_SIBLING;
				return sym(AXISNAME,at);
          }
        case 124: break;
        case 65: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAMESPACE_URI;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI;
				return sym(FNAME,fname);
          }
        case 125: break;
        case 10: 
          { isName = 1 ; return sym(LP);
          }
        case 126: break;
        case 7: 
          { isName = 1 ; return sym(ADD);
          }
        case 127: break;
        case 56: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRANSLATE;
				fname = new FuncName();
				fname.i = FuncName.TRANSLATE;
				return sym(FNAME,fname);
          }
        case 128: break;
        case 41: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.COUNT;
				fname = new FuncName();
				fname.i = FuncName.COUNT;
				return sym(FNAME,fname);
          }
        case 129: break;
        case 61: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.PRECEDING;
				return sym(AXISNAME,at);
          }
        case 130: break;
        case 9: 
          { isName = 1 ; return sym(COMMA);
          }
        case 131: break;
        case 46: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONCAT;
				fname = new FuncName();
				fname.i = FuncName.CONCAT;
				return sym(FNAME,fname);
          }
        case 132: break;
        case 54: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR;
				return sym(AXISNAME,at);
          }
        case 133: break;
        case 47: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.CHILD;
				return sym(AXISNAME,at);
          }
        case 134: break;
        case 19: 
          { isName = 1 ; return sym(UNION) ;
          }
        case 135: break;
        case 74: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING_SIBLING;
				return sym(AXISNAME,at);
          }
        case 136: break;
        case 5: 
          { isName = 1 ; return sym(SUB);
          }
        case 137: break;
        case 31: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NOT;
				fname = new FuncName();
				fname.i = FuncName.NOT;
				return sym(FNAME,fname);
          }
        case 138: break;
        case 44: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NUMBER;
				fname = new FuncName();
				fname.i = FuncName.NUMBER;
				return sym(FNAME,fname);
          }
        case 139: break;
        case 57: 
          { isName = 1;
    yypushback(1);
    fname = new FuncName();
    fname.i = FuncName.GP_WITHIN;
    return sym(FNAME, fname);
          }
        case 140: break;
        case 40: 
          { isName = 0;
				ntest = new Ntest();
				ntest.i = Ntest.TEXT;
				ntest.arg = null;
				return sym(NTEST,ntest);
          }
        case 141: break;
        case 62: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.FOLLOWING;
				return sym(AXISNAME,at);
          }
        case 142: break;
        case 21: 
          { isName = 1 ; return sym(GE);
          }
        case 143: break;
        case 48: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.PARENT;
				return sym(AXISNAME,at);
          }
        case 144: break;
        case 72: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.ANCESTOR_OR_SELF;
				return sym(AXISNAME,at);
          }
        case 145: break;
        case 2: 
          { /* eat white space */
          }
        case 146: break;
        case 67: 
          { isName =1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NORMALIZE_SPACE;
				fname = new FuncName();
				fname.i = FuncName.NORMALIZE_SPACE;
				return sym(FNAME,fname);
          }
        case 147: break;
        case 38: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND;
				fname = new FuncName();
				fname.i = FuncName.ROUND;
				return sym(FNAME,fname);
          }
        case 148: break;
        case 39: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.SELF;
				//System.out.println("SELF:: returned");
				return sym(AXISNAME,at);
          }
        case 149: break;
        case 55: 
          { isName = 1; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING;
				return sym(FNAME,fname);
          }
        case 150: break;
        case 63: 
          { isName = 1;
				at = new AxisType();
				at.i = AxisType.DESCENDANT;
				return sym(AXISNAME,at);
          }
        case 151: break;
        case 22: 
          { isName = 1 ; return sym(LE);
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
