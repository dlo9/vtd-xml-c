/* 
 * Copyright (C) 2002-2004 XimpleWare, info@ximpleware.com
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
package com.ximpleware.xpath;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/26/05 7:19 PM from the specification file
 * <tt>scanner.flex</tt>
 */
class Yylex extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 16, 41,  0,  3,  0,  0, 42,  9, 10, 17,  5,  8,  4,  6, 18, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 44,  0, 14, 15, 13,  0, 
     7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0, 12,  0,  0, 
     0, 24, 38, 32, 19, 34, 39, 35, 37, 20,  0,  0, 28, 22, 25, 23, 
    31,  0, 26, 29, 30, 33, 21, 36, 43,  0, 40,  0, 27,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\0\1\20\1\21\6\1\1\22\7\1\3\0\1\3"+
    "\1\23\1\24\1\25\1\26\1\27\3\1\1\30\27\1"+
    "\1\31\1\1\1\32\1\33\1\1\1\34\1\35\45\1"+
    "\1\0\1\36\10\1\1\0\1\37\26\1\2\0\1\1"+
    "\1\0\1\40\4\1\1\0\1\41\1\0\1\42\3\1"+
    "\2\0\1\1\1\0\1\43\2\0\21\1\1\44\3\1"+
    "\1\0\1\45\4\1\1\0\1\46\1\1\1\47\7\1"+
    "\1\0\1\50\1\1\2\0\2\1\1\0\1\51\1\0"+
    "\1\52\5\1\1\0\1\53\2\1\1\0\1\1\1\54"+
    "\3\1\2\0\4\1\1\0\1\55\1\1\1\0\1\56"+
    "\15\1\1\0\1\57\2\1\2\0\1\1\1\0\1\60"+
    "\1\0\1\61\2\1\1\0\1\1\1\0\10\1\1\0"+
    "\1\62\2\1\1\63\1\0\1\64\2\1\1\0\1\1"+
    "\1\65\2\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\66\1\0\1\67\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\70\1\1"+
    "\1\0\1\1\1\71\1\0\1\72\5\1\1\0\1\1"+
    "\1\73\1\0\1\1\1\74\1\0\1\1\1\75\3\1"+
    "\1\0\1\76\23\1\1\0\1\77\1\0\1\100\17\1"+
    "\1\0\1\101\1\0\1\102\5\1\3\0\1\103\4\1"+
    "\1\0\1\104\1\1\6\0\1\1\1\0\1\105\1\0"+
    "\1\106\1\0\1\107\3\1\2\0\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\264\0\341\0\264"+
    "\0\264\0\264\0\264\0\264\0\264\0\u010e\0\u013b\0\264"+
    "\0\u0168\0\264\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\264\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\264\0\264\0\264"+
    "\0\264\0\264\0\u04bf\0\u04ec\0\u0519\0\55\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\264\0\u0951\0\264"+
    "\0\55\0\u097e\0\55\0\55\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\264\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\264\0\u11ee\0\u121b\0\u1248"+
    "\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0"+
    "\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\264"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\264\0\u1761\0\264"+
    "\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\264"+
    "\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04"+
    "\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c"+
    "\0\u1b99\0\u1bc6\0\u1bf3\0\264\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7"+
    "\0\264\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\264\0\u1db5"+
    "\0\264\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0"+
    "\0\u1f1d\0\264\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b"+
    "\0\264\0\u2058\0\264\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139"+
    "\0\u2166\0\264\0\u2193\0\u21c0\0\u21ed\0\u221a\0\264\0\u2247"+
    "\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af"+
    "\0\u23dc\0\264\0\u2409\0\u2436\0\264\0\u2463\0\u2490\0\u24bd"+
    "\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625"+
    "\0\u2652\0\u267f\0\u26ac\0\264\0\u26d9\0\u2706\0\u2733\0\u2760"+
    "\0\u278d\0\u27ba\0\264\0\u27e7\0\264\0\u2814\0\u2841\0\u286e"+
    "\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6"+
    "\0\u2a03\0\u2a30\0\u2a5d\0\264\0\u2a8a\0\u2ab7\0\264\0\u2ae4"+
    "\0\264\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\264\0\u2bc5\0\u2bf2"+
    "\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a"+
    "\0\u2d87\0\264\0\u2db4\0\264\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68"+
    "\0\u2e95\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0"+
    "\0\264\0\u2ffd\0\u302a\0\u3057\0\264\0\u3084\0\264\0\u30b1"+
    "\0\u30de\0\u310b\0\u3138\0\u3165\0\u3192\0\u31bf\0\264\0\u31ec"+
    "\0\u3219\0\264\0\u3246\0\u3273\0\264\0\u32a0\0\u32cd\0\u32fa"+
    "\0\u3327\0\264\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408\0\u3435"+
    "\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u3516\0\u3543\0\u3570\0\u359d"+
    "\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e\0\u36ab\0\264\0\u36d8"+
    "\0\264\0\u3705\0\u3732\0\u375f\0\u378c\0\u37b9\0\u37e6\0\u3813"+
    "\0\u3840\0\u386d\0\u389a\0\u38c7\0\u38f4\0\u3921\0\u394e\0\u397b"+
    "\0\u39a8\0\264\0\u39d5\0\264\0\u3a02\0\u3a2f\0\u3a5c\0\u3a89"+
    "\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d\0\264\0\u3b6a\0\u3b97\0\u3bc4"+
    "\0\u3bf1\0\u3c1e\0\264\0\u3c4b\0\u3c78\0\u3ca5\0\u3cd2\0\u3cff"+
    "\0\u3d2c\0\u3d59\0\u3d86\0\u3db3\0\264\0\u3de0\0\264\0\u3e0d"+
    "\0\264\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\2\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\5\2\1\40\1\41\1\2\1\42\1\43\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\0\1\3\53\0\1\2"+
    "\1\0\1\4\1\0\1\2\1\0\1\45\14\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\44\57\0\1\45\3\0"+
    "\1\46\65\0\1\47\54\0\1\50\54\0\1\51\57\0"+
    "\1\52\32\0\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\1\2\1\53\6\2\1\0\6\2\1\54\6\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\4\2\1\55\3\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\7\2\1\56"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\6\2\1\57\1\2\1\0\2\2"+
    "\1\60\12\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\4\2\1\61\1\62\2\2\1\0"+
    "\5\2\1\63\7\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\4\2\1\64\3\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\4\2\1\65\1\66\2\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\2\2\1\67\2\2\1\70\1\71"+
    "\6\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\7\2\1\72\1\0\6\2\1\73\6\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\4\2\1\74\1\75\1\2\1\76\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\4\2\1\77\3\2\1\0\6\2\1\100\2\2"+
    "\1\101\3\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\4\2\1\102\3\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\4\2\1\103\1\104\2\2\1\0\1\105\14\2"+
    "\2\0\1\2\1\44\51\42\1\106\3\42\52\43\1\106"+
    "\2\43\1\107\1\0\1\107\1\0\1\107\14\0\1\110"+
    "\1\0\10\107\1\0\15\107\2\0\1\107\3\0\1\45"+
    "\52\0\1\2\1\0\1\2\1\0\1\2\16\0\2\2"+
    "\1\111\5\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\1\2"+
    "\1\112\13\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\1\113\7\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\1\114\7\2\1\0\4\2\1\115\10\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\2\2\1\116\12\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\1\117\6\2\1\120"+
    "\1\0\2\2\1\121\12\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\3\2\1\122\4\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\3\2\1\123\4\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\5\2\1\124\7\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\4\2\1\125\10\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\6\2\1\126\1\2"+
    "\1\0\1\2\1\127\13\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\5\2\1\130\1\2"+
    "\1\131\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\3\2\1\132\4\2\1\0"+
    "\12\2\1\133\2\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\1\134\14\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\5\2\1\135\2\2\1\0\5\2\1\136\7\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\15\2\2\0\1\137\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\1\2"+
    "\1\140\13\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\7\2\1\141\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\4\2\1\142\3\2\1\0\6\2\1\143\6\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\3\2\1\144\2\2\1\145\1\2\1\0\5\2\1\146"+
    "\7\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\1\2\1\147\6\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\1\2\1\150\6\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\4\2\1\151"+
    "\3\2\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\1\152\14\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\1\153\14\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\4\2\1\154"+
    "\3\2\1\0\15\2\2\0\1\2\1\44\1\107\1\0"+
    "\1\107\1\0\1\107\16\0\10\107\1\0\15\107\2\0"+
    "\1\107\1\0\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\4\2\1\155\10\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\6\2\1\156\6\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\7\2\1\157\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\6\2\1\160\6\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\3\2"+
    "\1\161\4\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\162\1\2\1\0\1\2\4\0\1\163\11\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\6\2\1\164\6\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\12\2\1\165\2\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\6\2"+
    "\1\166\1\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\5\2\1\167\2\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\7\2\1\170\5\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\2\2\1\171\12\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\7\2"+
    "\1\172\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\1\2\1\173\6\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\174\1\2\1\0"+
    "\1\2\4\0\1\175\11\0\10\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\1\2\1\176\13\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\13\2\1\177\1\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\6\2\1\200\1\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\6\2\1\201\6\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\2\2\1\202\12\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\1\2\1\203"+
    "\6\2\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\6\2\1\204"+
    "\6\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\4\2\1\205\10\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\4\2\1\206\10\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\3\2\1\207"+
    "\4\2\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\2\2\1\210"+
    "\1\2\1\211\10\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\6\2\1\212\1\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\1\213\14\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\1\214\14\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\1\215\14\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\1\216\14\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\1\2\1\217\13\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\4\2\1\220\3\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\6\2\1\221\6\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\1\2\1\222\13\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\1\2\1\223"+
    "\6\2\1\0\15\2\2\0\1\2\1\44\1\2\1\224"+
    "\1\2\1\0\1\2\4\0\1\225\11\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\5\2\1\226\2\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\0\1\162\7\0\1\163\43\0\1\2"+
    "\1\227\1\2\1\0\1\2\4\0\1\230\11\0\10\2"+
    "\1\0\1\2\1\231\13\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\6\2"+
    "\1\232\6\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\1\233\7\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\1\234\14\2\2\0\1\2\1\44\1\2"+
    "\1\235\1\2\1\0\1\2\4\0\1\236\11\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\237\1\2"+
    "\1\0\1\2\4\0\1\240\11\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\2\2\1\241\12\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\6\2"+
    "\1\242\1\2\1\0\15\2\2\0\1\2\1\44\1\0"+
    "\1\174\7\0\1\175\43\0\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\2\2\1\243\12\2\2\0"+
    "\1\2\1\44\1\2\1\244\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\15\2\2\0\1\2\1\245\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\1\2\1\246"+
    "\13\2\2\0\1\2\1\44\1\2\1\247\1\2\1\0"+
    "\1\2\4\0\1\250\11\0\10\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\251\1\2\1\0\1\2\4\0"+
    "\1\252\11\0\10\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\2\2\1\253\12\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\6\2\1\254\1\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\6\2\1\255\6\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\6\2\1\256\6\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\6\2\1\257\6\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\5\2\1\260\2\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\5\2\1\261\2\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\2\2\1\262\12\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\1\2\1\263"+
    "\6\2\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\1\264\7\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\6\2\1\265\6\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\4\2"+
    "\1\266\3\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\6\2"+
    "\1\267\6\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\7\2\1\270\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\6\2\1\271\1\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\2\2\1\272\12\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\12\2\1\273"+
    "\2\2\2\0\1\2\1\44\1\0\1\224\7\0\1\225"+
    "\44\0\1\225\10\0\1\274\42\0\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\1\275\14\2\2\0"+
    "\1\2\1\44\1\0\1\227\7\0\1\230\43\0\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\3\2"+
    "\1\276\11\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\7\2\1\277\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\300\1\2\1\0\1\2\4\0"+
    "\1\301\11\0\10\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\302\16\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\0\1\235\7\0\1\236"+
    "\44\0\1\237\7\0\1\240\43\0\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\1\2\1\303\13\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\7\2\1\304\5\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\7\2"+
    "\1\305\1\0\15\2\2\0\1\2\1\44\1\0\1\244"+
    "\52\0\1\306\1\107\1\0\1\107\1\0\1\107\14\0"+
    "\1\110\1\0\10\107\1\0\15\107\2\0\1\107\1\307"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\1\310\14\2\2\0\1\2\1\44\1\0\1\247\7\0"+
    "\1\250\44\0\1\251\7\0\1\252\44\0\1\252\10\0"+
    "\1\311\42\0\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\1\2\1\312\6\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\2\2\1\313\12\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\1\2\1\314"+
    "\13\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\1\315\7\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\6\2"+
    "\1\316\1\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\1\2\1\317\6\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\2\2\1\320\12\2"+
    "\2\0\1\2\1\44\1\2\1\321\1\2\1\0\1\2"+
    "\4\0\1\322\11\0\10\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\6\2"+
    "\1\323\1\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\324\1\2\1\0\1\2\16\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\325\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\5\2\1\326\2\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\10\2\1\327\4\2\2\0\1\2\1\44\1\2"+
    "\1\330\1\2\1\0\1\2\4\0\1\331\11\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\332\1\2"+
    "\1\0\1\2\4\0\1\333\11\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\1\334\7\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\4\2\1\335"+
    "\3\2\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\5\2\1\336"+
    "\7\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\1\2\1\337\6\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\5\2\1\340\2\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\341\1\2\1\0\1\2\4\0\1\342\11\0"+
    "\10\2\1\0\15\2\2\0\1\2\1\44\1\0\1\300"+
    "\7\0\1\301\43\0\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\6\2\1\343\1\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\344\16\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\345\1\2"+
    "\1\0\1\346\4\0\1\347\11\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\1\2\1\350\6\2\1\0\15\2\2\0\1\2"+
    "\1\44\54\0\1\307\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\5\2\1\351\2\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\4\2"+
    "\1\352\3\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\353\1\2\1\0\1\2\16\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\354\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\1\2\1\355\13\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\1\2"+
    "\1\356\6\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\2\2"+
    "\1\357\12\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\6\2\1\360\1\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\361\1\2\1\0\1\2"+
    "\4\0\1\362\11\0\10\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\0\1\321\7\0\1\322\43\0\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\7\2\1\363"+
    "\5\2\2\0\1\2\1\44\1\0\1\324\52\0\1\364"+
    "\1\107\1\0\1\107\1\0\1\107\14\0\1\110\1\0"+
    "\10\107\1\0\15\107\2\0\1\107\1\365\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\6\2\1\366\1\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\1\2\1\367\6\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\0\1\330\7\0\1\331\44\0\1\332"+
    "\7\0\1\333\43\0\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\5\2\1\370\2\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\7\2"+
    "\1\371\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\2\2\1\372"+
    "\12\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\14\2\1\373\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\4\2\1\374\10\2\2\0\1\2\1\44\1\0"+
    "\1\341\7\0\1\342\43\0\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\5\2\1\375\2\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\10\2\1\376\4\2\2\0\1\2\1\44"+
    "\1\0\1\345\7\0\1\347\43\0\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\1\377\14\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\6\2\1\u0100\1\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\2\2\1\u0101\12\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\6\2\1\u0102\1\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\0\1\353\52\0\1\u0103"+
    "\1\107\1\0\1\107\1\0\1\107\14\0\1\110\1\0"+
    "\10\107\1\0\15\107\2\0\1\107\1\u0104\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\1\2\1\u0105\6\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\6\2\1\u0106\1\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\u0107\1\2\1\0\1\2\4\0"+
    "\1\u0108\11\0\10\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\1\2\1\u0109\13\2\2\0\1\2\1\44\1\0\1\361"+
    "\7\0\1\362\43\0\1\2\1\u010a\1\2\1\0\1\2"+
    "\4\0\1\u010b\11\0\10\2\1\0\15\2\2\0\1\2"+
    "\1\44\54\0\1\365\1\2\1\u010c\1\2\1\0\1\2"+
    "\4\0\1\u010d\11\0\10\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\6\2"+
    "\1\u010e\1\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\6\2\1\u010f\1\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\u0110\1\2"+
    "\1\0\1\u0111\16\0\10\2\1\0\15\2\2\0\1\2"+
    "\1\u0112\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\6\2\1\u0113\6\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\6\2"+
    "\1\u0114\6\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\6\2\1\u0115\6\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\3\2\1\u0116\4\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\1\2"+
    "\1\u0117\6\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\6\2"+
    "\1\u0118\6\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\7\2\1\u0119\5\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\6\2\1\u011a\6\2\2\0\1\2"+
    "\1\44\1\2\1\u011b\1\2\1\0\1\2\4\0\1\u011c"+
    "\11\0\10\2\1\0\15\2\2\0\1\2\1\44\54\0"+
    "\1\u0104\1\2\1\0\1\2\1\0\1\2\16\0\6\2"+
    "\1\u011d\1\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\7\2"+
    "\1\u011e\5\2\2\0\1\2\1\44\1\0\1\u0107\7\0"+
    "\1\u0108\44\0\1\u0108\10\0\1\u011f\42\0\1\2\1\u0120"+
    "\1\2\1\0\1\2\4\0\1\u0121\11\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\0\1\u010a\7\0\1\u010b"+
    "\44\0\1\u010c\7\0\1\u010d\43\0\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\7\2\1\u0122\5\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\2\2\1\u0123\12\2\2\0\1\2"+
    "\1\44\1\0\1\u0110\52\0\1\u0124\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\4\2\1\u0125\3\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\107\1\0\1\107\1\0\1\107"+
    "\14\0\1\110\1\0\10\107\1\0\15\107\2\0\1\107"+
    "\1\u0126\1\2\1\u0127\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\u0128\1\2\1\0\1\2"+
    "\1\0\1\u0129\16\0\10\2\1\0\15\2\2\0\1\2"+
    "\1\44\1\2\1\u012a\1\2\1\0\1\u012b\16\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\u012c\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\6\2\1\u012d\6\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\2\2\1\u012e\12\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\6\2"+
    "\1\u012f\1\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\u0130\1\2\1\0\1\u0131\4\0\1\u0132\11\0\10\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\u0133\1\2"+
    "\1\0\1\2\4\0\1\u0134\11\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\0\1\u011b\7\0\1\u011c\43\0"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\7\2\1\u0135\5\2\2\0\1\2\1\44\1\2\1\u0136"+
    "\1\2\1\0\1\u0137\16\0\10\2\1\0\15\2\2\0"+
    "\1\2\1\u0138\1\0\1\u0120\7\0\1\u0121\43\0\1\2"+
    "\1\u0139\1\2\1\0\1\u013a\16\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\u013b\1\2\1\u013c\1\2\1\0\1\u013d"+
    "\16\0\10\2\1\0\15\2\2\0\1\2\1\u013e\54\0"+
    "\1\u0126\1\2\1\0\1\2\1\0\1\2\16\0\7\2"+
    "\1\u013f\1\0\15\2\2\0\1\2\1\44\1\0\1\u0127"+
    "\52\0\1\u0140\1\107\1\0\1\107\1\0\1\107\14\0"+
    "\1\110\1\0\10\107\1\0\15\107\2\0\1\107\1\u0141"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\1\2\1\u0142\13\2\2\0\1\2\1\44\1\0\1\u012a"+
    "\52\0\1\u0143\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\5\2\1\u0144\7\2\2\0\1\2\1\44"+
    "\1\107\1\0\1\107\1\0\1\107\14\0\1\110\1\0"+
    "\10\107\1\0\15\107\2\0\1\107\1\u0145\1\2\1\u0146"+
    "\1\2\1\0\1\2\4\0\1\u0147\11\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\11\2\1\u0148\3\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\7\2\1\u0149\5\2\2\0\1\2\1\44"+
    "\1\0\1\u0130\7\0\1\u0132\43\0\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\5\2\1\u014a\2\2\1\0\12\2"+
    "\1\u014b\2\2\2\0\1\2\1\44\1\0\1\u0133\7\0"+
    "\1\u0134\43\0\1\2\1\0\1\2\1\0\1\u014c\16\0"+
    "\10\2\1\0\15\2\2\0\1\2\1\44\1\0\1\u0136"+
    "\52\0\1\u014d\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\1\2\1\u014e\13\2\2\0\1\2\1\44"+
    "\1\107\1\0\1\107\1\0\1\107\14\0\1\110\1\0"+
    "\10\107\1\0\15\107\2\0\1\107\1\u014f\1\0\1\u0139"+
    "\52\0\1\u0150\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\1\2\1\u0151\13\2\2\0\1\2\1\44"+
    "\1\107\1\0\1\107\1\0\1\107\14\0\1\110\1\0"+
    "\10\107\1\0\15\107\2\0\1\107\1\u0152\1\0\1\u013c"+
    "\52\0\1\u0153\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\4\2\1\u0154\3\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\107\1\0\1\107\1\0\1\107\14\0\1\110\1\0"+
    "\10\107\1\0\15\107\2\0\1\107\1\u0155\1\2\1\0"+
    "\1\2\1\0\1\u0156\16\0\10\2\1\0\15\2\2\0"+
    "\1\2\1\44\54\0\1\u0141\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\3\2\1\u0157\11\2\2\0"+
    "\1\2\1\44\54\0\1\u0145\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\7\2\1\u0158\1\0\15\2\2\0\1\2"+
    "\1\44\1\0\1\u0146\7\0\1\u0147\43\0\1\2\1\u0159"+
    "\1\2\1\0\1\2\4\0\1\u015a\11\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\2\2\1\u015b\12\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\13\2\1\u015c\1\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\6\2\1\u015d\6\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\1\2\1\u015e\6\2\1\0"+
    "\15\2\2\0\1\2\1\44\54\0\1\u014f\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\1\2\1\u015f\6\2\1\0"+
    "\15\2\2\0\1\2\1\44\54\0\1\u0152\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\1\2\1\u0160\6\2\1\0"+
    "\15\2\2\0\1\2\1\44\54\0\1\u0155\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\7\2\1\u0161\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\1\2\1\u0162\13\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\5\2"+
    "\1\u0163\2\2\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\1\2\1\u0164\6\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\0\1\u0159\7\0"+
    "\1\u015a\43\0\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\11\2\1\u0165\3\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\2\2\1\u0166\12\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\13\2\1\u0167"+
    "\1\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\6\2\1\u0168\1\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\12\2\1\u0169\2\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\12\2\1\u016a\2\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\u016b\16\0\10\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\6\2\1\u016c\6\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\4\2\1\u016d\10\2\2\0\1\2\1\44\1\2\1\u016e"+
    "\1\2\1\0\1\2\4\0\1\u016f\11\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\u0170\1\2\1\0"+
    "\1\2\4\0\1\u0171\11\0\10\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\6\2\1\u0172\6\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\4\2\1\u0173"+
    "\3\2\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\1\2\1\u0174"+
    "\13\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\1\u0175\14\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\1\u0176\14\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\1\2\1\u0177"+
    "\13\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\1\u0178\14\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\6\2\1\u0179\6\2\2\0\1\2\1\44\1\0"+
    "\1\u016e\7\0\1\u016f\44\0\1\u0170\7\0\1\u0171\43\0"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\7\2\1\u017a"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\7\2\1\u017b\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\2\2\1\u017c\12\2\2\0\1\2\1\44"+
    "\1\2\1\0\1\2\1\0\1\2\16\0\1\2\1\u017d"+
    "\6\2\1\0\15\2\2\0\1\2\1\44\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\1\2\1\u017e\6\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\6\2\1\u017f\6\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\13\2\1\u0180\1\2\2\0\1\2\1\44"+
    "\1\2\1\u0181\1\2\1\0\1\2\4\0\1\u0182\11\0"+
    "\10\2\1\0\15\2\2\0\1\2\1\44\1\2\1\u0183"+
    "\1\2\1\0\1\2\4\0\1\u0184\11\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\6\2\1\u0185\6\2\2\0"+
    "\1\2\1\44\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\7\2\1\u0186\1\0\15\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\6\2\1\u0187\1\2"+
    "\1\0\15\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\6\2\1\u0188\1\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\1\u0189\14\2\2\0\1\2\1\44"+
    "\1\2\1\u018a\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\u018b\1\0\1\u0181\7\0\1\u0182"+
    "\44\0\1\u0183\7\0\1\u0184\43\0\1\2\1\u018c\1\2"+
    "\1\0\1\2\4\0\1\u018d\11\0\10\2\1\0\15\2"+
    "\2\0\1\2\1\44\1\2\1\0\1\2\1\0\1\2"+
    "\16\0\10\2\1\0\5\2\1\u018e\7\2\2\0\1\2"+
    "\1\44\1\2\1\0\1\2\1\0\1\2\16\0\10\2"+
    "\1\0\7\2\1\u018f\5\2\2\0\1\2\1\44\1\2"+
    "\1\0\1\2\1\0\1\2\16\0\10\2\1\0\7\2"+
    "\1\u0190\5\2\2\0\1\2\1\44\1\2\1\0\1\2"+
    "\1\0\1\2\16\0\10\2\1\0\13\2\1\u0191\1\2"+
    "\2\0\1\2\1\44\1\0\1\u018a\52\0\1\u0192\1\107"+
    "\1\0\1\107\1\0\1\107\14\0\1\110\1\0\10\107"+
    "\1\0\15\107\2\0\1\107\1\u0193\1\0\1\u018c\7\0"+
    "\1\u018d\43\0\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\10\2\1\0\4\2\1\u0194\10\2\2\0\1\2\1\44"+
    "\1\2\1\u0195\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\u0196\1\2\1\u0197\1\2\1\0"+
    "\1\2\16\0\10\2\1\0\15\2\2\0\1\2\1\u0198"+
    "\1\2\1\u0199\1\2\1\0\1\2\16\0\10\2\1\0"+
    "\15\2\2\0\1\2\1\u019a\54\0\1\u0193\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\10\2\1\0\2\2\1\u019b"+
    "\12\2\2\0\1\2\1\44\1\0\1\u0195\52\0\1\u019c"+
    "\1\107\1\0\1\107\1\0\1\107\14\0\1\110\1\0"+
    "\10\107\1\0\15\107\2\0\1\107\1\u019d\1\0\1\u0197"+
    "\52\0\1\u019e\1\107\1\0\1\107\1\0\1\107\14\0"+
    "\1\110\1\0\10\107\1\0\15\107\2\0\1\107\1\u019f"+
    "\1\0\1\u0199\52\0\1\u01a0\1\107\1\0\1\107\1\0"+
    "\1\107\14\0\1\110\1\0\10\107\1\0\15\107\2\0"+
    "\1\107\1\u01a1\1\2\1\0\1\2\1\0\1\2\16\0"+
    "\1\2\1\u01a2\6\2\1\0\15\2\2\0\1\2\1\44"+
    "\54\0\1\u019d\54\0\1\u019f\54\0\1\u01a1\1\2\1\0"+
    "\1\2\1\0\1\2\16\0\4\2\1\u01a3\3\2\1\0"+
    "\15\2\2\0\1\2\1\44\1\2\1\0\1\2\1\0"+
    "\1\2\16\0\6\2\1\u01a4\1\2\1\0\15\2\2\0"+
    "\1\2\1\44\1\2\1\u01a5\1\2\1\0\1\2\4\0"+
    "\1\u01a6\11\0\10\2\1\0\15\2\2\0\1\2\1\44"+
    "\1\0\1\u01a5\7\0\1\u01a6\44\0\1\u01a6\10\0\1\u01a7"+
    "\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16155];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\2\11\1\1\6\11\2\1\1\11\1\0"+
    "\1\11\7\1\1\11\7\1\3\0\1\1\5\11\33\1"+
    "\1\11\1\1\1\11\51\1\1\0\1\11\10\1\1\0"+
    "\1\11\26\1\2\0\1\1\1\0\1\11\4\1\1\0"+
    "\1\11\1\0\1\11\3\1\2\0\1\1\1\0\1\11"+
    "\2\0\21\1\1\11\3\1\1\0\1\11\4\1\1\0"+
    "\1\11\1\1\1\11\7\1\1\0\1\11\1\1\2\0"+
    "\2\1\1\0\1\11\1\0\1\11\5\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\11\3\1\2\0\4\1\1\0"+
    "\1\11\1\1\1\0\1\11\15\1\1\0\1\11\2\1"+
    "\2\0\1\1\1\0\1\11\1\0\1\11\2\1\1\0"+
    "\1\1\1\0\10\1\1\0\1\11\2\1\1\11\1\0"+
    "\1\11\2\1\1\0\1\1\1\11\2\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\11\1\0\1\11"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\0\1\1\1\11\1\0"+
    "\1\11\5\1\1\0\1\1\1\11\1\0\1\1\1\11"+
    "\1\0\1\1\1\11\3\1\1\0\1\11\23\1\1\0"+
    "\1\11\1\0\1\11\17\1\1\0\1\11\1\0\1\11"+
    "\5\1\3\0\1\11\4\1\1\0\1\11\1\1\6\0"+
    "\1\1\1\0\1\11\1\0\1\11\1\0\1\11\3\1"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[423];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }

  int op_assert; 
  NameType name;
  FuncName fname; 
  Ntest ntest;
  AxisType at;
  int len;
  String literal;
  Double number; 

  /* public void report_error(String message, Object info) {
	//throw new XPathParseException("Syntax error during parsing");
  }

  public void report_fatal_error(String message, Object info) throws XPathParseException{
	throw new XPathParseException("Syntax error during parsing: "+ message);
  }

  public void syntax_error(Symbol cur_token) {
	
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) throws XPathParseException{
	throw new XPathParseException("XPath Syntax error: "+cur_token);
  }*/



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
  	op_assert = 1;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, XPathParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAME;
				fname = new FuncName();
				fname.i = FuncName.NAME;
				return sym(FNAME,fname);
          }
        case 73: break;
        case 5: 
          { op_assert = 1 ; return sym(ADD);
          }
        case 74: break;
        case 14: 
          { op_assert = 1 ; return sym(LT);
          }
        case 75: break;
        case 43: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NUMBER;
				fname = new FuncName();
				fname.i = FuncName.NUMBER;
				return sym(FNAME,fname);
          }
        case 76: break;
        case 69: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.PRECEDING_SIBLING;
				return sym(AXISNAME,at);
          }
        case 77: break;
        case 24: 
          { if (op_assert == 0) {		
		 return sym(OR);
	      } else {
		 op_assert = 1 ;
		 name = new NameType();
		 name.qname = "or";
		 return sym(NAME,name);
	      }
          }
        case 78: break;
        case 4: 
          { op_assert = 1 ; return sym(SUB);
          }
        case 79: break;
        case 58: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.LOCAL_NAME;
				fname = new FuncName();
				fname.i = FuncName.LOCAL_NAME;
				return sym(FNAME,fname);
          }
        case 80: break;
        case 16: 
          { if (op_assert ==0 )
		return  sym(MULT);
	 else {
		op_assert = 1;		
		name = new NameType();
		name.qname = "*";
		return sym(NAME,name);
	 }
          }
        case 81: break;
        case 17: 
          { op_assert = 1 ; 
	 //System.out.println("SLASH returned ");
	 return sym(SLASH);
          }
        case 82: break;
        case 9: 
          { op_assert = 1 ; return sym(LP);
          }
        case 83: break;
        case 41: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FALSE;
				fname = new FuncName();
				fname.i = FuncName.FALSE;
				return sym(FNAME,fname);
          }
        case 84: break;
        case 1: 
          { op_assert = 0;
				name = new NameType();
				name.qname = new String(yytext());
				//System.out.println("returned a NAME ==>" + yytext());
				if (yytext().charAt(0) =='-'){
				    throw new XPathParseException("Invalid char in name token:"+yytext());
				}
				return sym(NAME,name);
          }
        case 85: break;
        case 27: 
          { if (op_assert == 0 ) {
		 
		 return sym(DIV);
	      } else {
		 op_assert = 1 ;
		 name = new NameType();
		 name.qname = "div";
		 return sym(NAME,name);
	      }
          }
        case 86: break;
        case 44: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.STRING;
				fname = new FuncName();
				fname.i = FuncName.STRING;
				return sym(FNAME,fname);
          }
        case 87: break;
        case 33: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.LANG;
				fname = new FuncName();
				fname.i = FuncName.LANG;
				return sym(FNAME,fname);
          }
        case 88: break;
        case 70: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.FOLLOWING_SIBLING;
				return sym(AXISNAME,at);
          }
        case 89: break;
        case 46: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.CHILD;
				return sym(AXISNAME,at);
          }
        case 90: break;
        case 25: 
          { op_assert = 0;
				len = yytext().length();
				literal = yytext().substring(1, len-1);
				return sym(LITERAL,literal);
          }
        case 91: break;
        case 18: 
          { op_assert = 1 ; return sym(UNION) ;
          }
        case 92: break;
        case 34: 
          { op_assert = 0; 
			 	yypushback(1);
				fname = new FuncName();
				fname.i = FuncName.LAST;
				return sym(FNAME,fname);
          }
        case 93: break;
        case 29: 
          { if (op_assert == 0) {
		
		 return sym(AND);
	      } else {
		 op_assert = 1 ;
		 name = new NameType();
		 name.qname = "add";
		 return sym(NAME,name);
	      }
          }
        case 94: break;
        case 53: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.ANCESTOR;
				return sym(AXISNAME,at);
          }
        case 95: break;
        case 42: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.FLOOR;
				fname = new FuncName();
				fname.i = FuncName.FLOOR;
				return sym(FNAME,fname);
          }
        case 96: break;
        case 6: 
          { op_assert = 0 ; return sym(DOT);
          }
        case 97: break;
        case 19: 
          { op_assert = 0 ; return sym(DDOT);
          }
        case 98: break;
        case 35: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRUE;
				fname = new FuncName();
				fname.i = FuncName.TRUE;
				return sym(FNAME,fname);
          }
        case 99: break;
        case 67: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_BEFORE;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_BEFORE;
				return sym(FNAME,fname);
          }
        case 100: break;
        case 20: 
          { op_assert = 1 ; return sym(GE);
          }
        case 101: break;
        case 72: 
          { op_assert = 0;
						ntest = new Ntest();
						ntest.i = Ntest.PROCESSING_INSTRUCTION;
						ntest.arg = null;
						return sym(NTEST,ntest);
          }
        case 102: break;
        case 36: 
          { op_assert = 0;
				ntest = new Ntest();
				ntest.i = Ntest.NODE;
				ntest.arg = null;
				return sym(NTEST,ntest);
          }
        case 103: break;
        case 38: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.SELF;
				return sym(AXISNAME,at);
          }
        case 104: break;
        case 55: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.TRANSLATE;
				fname = new FuncName();
				fname.i = FuncName.TRANSLATE;
				return sym(FNAME,fname);
          }
        case 105: break;
        case 71: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.DESCENDANT_OR_SELF;
				return sym(AXISNAME,at);
          }
        case 106: break;
        case 56: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.ATTRIBUTE;
				return sym(AXISNAME,at);
          }
        case 107: break;
        case 3: 
          { op_assert = 0;
				number = new Double(yytext());
				//System.out.println("number returned ==> "+ Double.parseDouble(yytext()));
				return sym(NUMBER,number);
          }
        case 108: break;
        case 52: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONTAINS;
				fname = new FuncName();
				fname.i = FuncName.CONTAINS;
				return sym(FNAME,fname);
          }
        case 109: break;
        case 21: 
          { op_assert = 1 ; return sym(LE);
          }
        case 110: break;
        case 10: 
          { op_assert = 0 ; return sym(RP);
          }
        case 111: break;
        case 8: 
          { op_assert = 1 ; return sym(COMMA);
          }
        case 112: break;
        case 64: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STRING_LENGTH;
				fname = new FuncName();
				fname.i = FuncName.STRING_LENGTH;
				return sym(FNAME,fname);
          }
        case 113: break;
        case 51: 
          { op_assert = 0;
				ntest = new Ntest();
				ntest.i = Ntest.COMMENT;
				ntest.arg =  null;
				return sym(NTEST,ntest);
          }
        case 114: break;
        case 22: 
          { op_assert = 1 ; return sym(NE);
          }
        case 115: break;
        case 49: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.BOOLEAN;
				fname = new FuncName();
				fname.i = FuncName.BOOLEAN;
				return sym(FNAME,fname);
          }
        case 116: break;
        case 65: 
          { op_assert =0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NORMALIZE_SPACE;
				fname = new FuncName();
				fname.i = FuncName.NORMALIZE_SPACE;
				return sym(FNAME,fname);
          }
        case 117: break;
        case 48: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CEILING;
				fname = new FuncName();
				fname.i = FuncName.CEILING;
				return sym(FNAME,fname);
          }
        case 118: break;
        case 11: 
          { op_assert = 1 ; return sym(LB);
          }
        case 119: break;
        case 26: 
          { op_assert = 0;
				len = yytext().length();
				name = new NameType();
				name.prefix = yytext().substring(1,len-1);
				name.localname = "*";
				return sym(NAME,name);
          }
        case 120: break;
        case 66: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING_AFTER;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING_AFTER;
				return sym(FNAME,fname);
          }
        case 121: break;
        case 31: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUM;
				fname = new FuncName();
				fname.i = FuncName.SUM;
				return sym(FNAME,fname);
          }
        case 122: break;
        case 23: 
          { op_assert = 1 ; 
	 //System.out.println("DSLASH returned "); 
	 return sym(DSLASH);
          }
        case 123: break;
        case 57: 
          { op_assert =0;
				at = new AxisType();
				at.i = AxisType.NAMESPACE;
				return sym(AXISNAME,at);
          }
        case 124: break;
        case 59: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.PRECEDING;
				return sym(AXISNAME,at);
          }
        case 125: break;
        case 54: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.SUBSTRING;
				fname = new FuncName();
				fname.i = FuncName.SUBSTRING;
				return sym(FNAME,fname);
          }
        case 126: break;
        case 40: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.COUNT;
				fname = new FuncName();
				fname.i = FuncName.COUNT;
				return sym(FNAME,fname);
          }
        case 127: break;
        case 37: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.ROUND;
				fname = new FuncName();
				fname.i = FuncName.ROUND;
				return sym(FNAME,fname);
          }
        case 128: break;
        case 7: 
          { op_assert = 1 ; return sym(AT);
          }
        case 129: break;
        case 39: 
          { op_assert = 0;
				ntest = new Ntest();
				ntest.i = Ntest.TEXT;
				ntest.arg = null;
				return sym(NTEST,ntest);
          }
        case 130: break;
        case 50: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.POSITION;
				fname = new FuncName();
				fname.i = FuncName.POSITION;
				return sym(FNAME,fname);
          }
        case 131: break;
        case 28: 
          { if (op_assert == 0) {
		  
		 return sym(MOD);
	      } else {
		 op_assert = 1 ;
		 name = new NameType();
		 name.qname = "mod";
		 return sym(NAME,name);
	      }
          }
        case 132: break;
        case 60: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.FOLLOWING;
				return sym(AXISNAME,at);
          }
        case 133: break;
        case 68: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.ANCESTOR_OR_SELF;
				return sym(AXISNAME,at);
          }
        case 134: break;
        case 2: 
          { /* eat white space */
          }
        case 135: break;
        case 13: 
          { op_assert = 1 ; return sym(GT);
          }
        case 136: break;
        case 47: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.PARENT;
				return sym(AXISNAME,at);
          }
        case 137: break;
        case 62: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.STARTS_WITH;
				fname = new FuncName();
				fname.i = FuncName.STARTS_WITH;
				return sym(FNAME,fname);
          }
        case 138: break;
        case 61: 
          { op_assert = 0;
				at = new AxisType();
				at.i = AxisType.DESCENDANT;
				return sym(AXISNAME,at);
          }
        case 139: break;
        case 12: 
          { op_assert = 0 ; return sym(RB);
          }
        case 140: break;
        case 15: 
          { op_assert = 1 ; return sym(EQ);
          }
        case 141: break;
        case 30: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.NOT;
				fname = new FuncName();
				fname.i = FuncName.NOT;
				return sym(FNAME,fname);
          }
        case 142: break;
        case 63: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i =  FuncName.NAMESPACE_URI;
				fname = new FuncName();
				fname.i = FuncName.NAMESPACE_URI;
				return sym(FNAME,fname);
          }
        case 143: break;
        case 45: 
          { op_assert = 0; 
			 	yypushback(1);
				//yyparser.yylval.fname.i = FuncName.CONCAT;
				fname = new FuncName();
				fname.i = FuncName.CONCAT;
				return sym(FNAME,fname);
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
